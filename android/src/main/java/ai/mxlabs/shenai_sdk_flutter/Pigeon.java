// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package ai.mxlabs.shenai_sdk_flutter;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Pigeon {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  public enum InitializationResult {
    SUCCESS(0),
    FAIL_INVALID_API_KEY(1),
    FAIL_CONNECTION_ERROR(2),
    FAIL_INTERNAL_ERROR(3);

    final int index;

    private InitializationResult(final int index) {
      this.index = index;
    }
  }

  public enum OperatingMode {
    POSITIONING(0),
    MEASURE(1),
    SYSTEM_OVERLOADED(2);

    final int index;

    private OperatingMode(final int index) {
      this.index = index;
    }
  }

  public enum PrecisionMode {
    STRICT(0),
    RELAXED(1);

    final int index;

    private PrecisionMode(final int index) {
      this.index = index;
    }
  }

  public enum MeasurementPreset {
    ONE_MINUTE_HR_HRV_BR(0),
    ONE_MINUTE_BETA_METRICS(1),
    INFINITE_HR(2),
    INFINITE_METRICS(3),
    FOURTY_FIVE_SECONDS_UNVALIDATED(4),
    THIRTY_SECONDS_UNVALIDATED(5);

    final int index;

    private MeasurementPreset(final int index) {
      this.index = index;
    }
  }

  public enum CameraMode {
    OFF(0),
    FACING_USER(1),
    FACING_ENVIRONMENT(2);

    final int index;

    private CameraMode(final int index) {
      this.index = index;
    }
  }

  public enum OnboardingMode {
    HIDDEN(0),
    SHOW_ONCE(1),
    SHOW_ALWAYS(2);

    final int index;

    private OnboardingMode(final int index) {
      this.index = index;
    }
  }

  public enum FaceState {
    OK(0),
    TOO_FAR(1),
    TOO_CLOSE(2),
    NOT_CENTERED(3),
    NOT_VISIBLE(4),
    UNKNOWN(5);

    final int index;

    private FaceState(final int index) {
      this.index = index;
    }
  }

  public enum MeasurementState {
    NOT_STARTED(0),
    WAITING_FOR_FACE(1),
    RUNNING_SIGNAL_SHORT(2),
    RUNNING_SIGNAL_GOOD(3),
    RUNNING_SIGNAL_BAD(4),
    RUNNING_SIGNAL_BAD_DEVICE_UNSTABLE(5),
    FINISHED(6),
    FAILED(7);

    final int index;

    private MeasurementState(final int index) {
      this.index = index;
    }
  }

  public enum Gender {
    MALE(0),
    FEMALE(1),
    OTHER(2);

    final int index;

    private Gender(final int index) {
      this.index = index;
    }
  }

  public enum Race {
    WHITE(0),
    AFRICAN_AMERICAN(1),
    OTHER(2);

    final int index;

    private Race(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class InitializeResponse {
    private @NonNull InitializationResult result;

    public @NonNull InitializationResult getResult() {
      return result;
    }

    public void setResult(@NonNull InitializationResult setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"result\" is null.");
      }
      this.result = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    InitializeResponse() {}

    public static final class Builder {

      private @Nullable InitializationResult result;

      public @NonNull Builder setResult(@NonNull InitializationResult setterArg) {
        this.result = setterArg;
        return this;
      }

      public @NonNull InitializeResponse build() {
        InitializeResponse pigeonReturn = new InitializeResponse();
        pigeonReturn.setResult(result);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(result == null ? null : result.index);
      return toListResult;
    }

    static @NonNull InitializeResponse fromList(@NonNull ArrayList<Object> list) {
      InitializeResponse pigeonResult = new InitializeResponse();
      Object result = list.get(0);
      pigeonResult.setResult(InitializationResult.values()[(int) result]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class OperatingModeResponse {
    private @NonNull OperatingMode mode;

    public @NonNull OperatingMode getMode() {
      return mode;
    }

    public void setMode(@NonNull OperatingMode setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"mode\" is null.");
      }
      this.mode = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    OperatingModeResponse() {}

    public static final class Builder {

      private @Nullable OperatingMode mode;

      public @NonNull Builder setMode(@NonNull OperatingMode setterArg) {
        this.mode = setterArg;
        return this;
      }

      public @NonNull OperatingModeResponse build() {
        OperatingModeResponse pigeonReturn = new OperatingModeResponse();
        pigeonReturn.setMode(mode);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(mode == null ? null : mode.index);
      return toListResult;
    }

    static @NonNull OperatingModeResponse fromList(@NonNull ArrayList<Object> list) {
      OperatingModeResponse pigeonResult = new OperatingModeResponse();
      Object mode = list.get(0);
      pigeonResult.setMode(OperatingMode.values()[(int) mode]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PrecisionModeResponse {
    private @NonNull PrecisionMode mode;

    public @NonNull PrecisionMode getMode() {
      return mode;
    }

    public void setMode(@NonNull PrecisionMode setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"mode\" is null.");
      }
      this.mode = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PrecisionModeResponse() {}

    public static final class Builder {

      private @Nullable PrecisionMode mode;

      public @NonNull Builder setMode(@NonNull PrecisionMode setterArg) {
        this.mode = setterArg;
        return this;
      }

      public @NonNull PrecisionModeResponse build() {
        PrecisionModeResponse pigeonReturn = new PrecisionModeResponse();
        pigeonReturn.setMode(mode);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(mode == null ? null : mode.index);
      return toListResult;
    }

    static @NonNull PrecisionModeResponse fromList(@NonNull ArrayList<Object> list) {
      PrecisionModeResponse pigeonResult = new PrecisionModeResponse();
      Object mode = list.get(0);
      pigeonResult.setMode(PrecisionMode.values()[(int) mode]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MeasurementPresetResponse {
    private @NonNull MeasurementPreset preset;

    public @NonNull MeasurementPreset getPreset() {
      return preset;
    }

    public void setPreset(@NonNull MeasurementPreset setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"preset\" is null.");
      }
      this.preset = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    MeasurementPresetResponse() {}

    public static final class Builder {

      private @Nullable MeasurementPreset preset;

      public @NonNull Builder setPreset(@NonNull MeasurementPreset setterArg) {
        this.preset = setterArg;
        return this;
      }

      public @NonNull MeasurementPresetResponse build() {
        MeasurementPresetResponse pigeonReturn = new MeasurementPresetResponse();
        pigeonReturn.setPreset(preset);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(preset == null ? null : preset.index);
      return toListResult;
    }

    static @NonNull MeasurementPresetResponse fromList(@NonNull ArrayList<Object> list) {
      MeasurementPresetResponse pigeonResult = new MeasurementPresetResponse();
      Object preset = list.get(0);
      pigeonResult.setPreset(MeasurementPreset.values()[(int) preset]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CameraModeResponse {
    private @NonNull CameraMode mode;

    public @NonNull CameraMode getMode() {
      return mode;
    }

    public void setMode(@NonNull CameraMode setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"mode\" is null.");
      }
      this.mode = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    CameraModeResponse() {}

    public static final class Builder {

      private @Nullable CameraMode mode;

      public @NonNull Builder setMode(@NonNull CameraMode setterArg) {
        this.mode = setterArg;
        return this;
      }

      public @NonNull CameraModeResponse build() {
        CameraModeResponse pigeonReturn = new CameraModeResponse();
        pigeonReturn.setMode(mode);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(mode == null ? null : mode.index);
      return toListResult;
    }

    static @NonNull CameraModeResponse fromList(@NonNull ArrayList<Object> list) {
      CameraModeResponse pigeonResult = new CameraModeResponse();
      Object mode = list.get(0);
      pigeonResult.setMode(CameraMode.values()[(int) mode]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class FaceStateResponse {
    private @NonNull FaceState state;

    public @NonNull FaceState getState() {
      return state;
    }

    public void setState(@NonNull FaceState setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"state\" is null.");
      }
      this.state = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    FaceStateResponse() {}

    public static final class Builder {

      private @Nullable FaceState state;

      public @NonNull Builder setState(@NonNull FaceState setterArg) {
        this.state = setterArg;
        return this;
      }

      public @NonNull FaceStateResponse build() {
        FaceStateResponse pigeonReturn = new FaceStateResponse();
        pigeonReturn.setState(state);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(state == null ? null : state.index);
      return toListResult;
    }

    static @NonNull FaceStateResponse fromList(@NonNull ArrayList<Object> list) {
      FaceStateResponse pigeonResult = new FaceStateResponse();
      Object state = list.get(0);
      pigeonResult.setState(FaceState.values()[(int) state]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class NormalizedFaceBbox {
    private @NonNull Double x;

    public @NonNull Double getX() {
      return x;
    }

    public void setX(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"x\" is null.");
      }
      this.x = setterArg;
    }

    private @NonNull Double y;

    public @NonNull Double getY() {
      return y;
    }

    public void setY(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"y\" is null.");
      }
      this.y = setterArg;
    }

    private @NonNull Double width;

    public @NonNull Double getWidth() {
      return width;
    }

    public void setWidth(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"width\" is null.");
      }
      this.width = setterArg;
    }

    private @NonNull Double height;

    public @NonNull Double getHeight() {
      return height;
    }

    public void setHeight(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"height\" is null.");
      }
      this.height = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    NormalizedFaceBbox() {}

    public static final class Builder {

      private @Nullable Double x;

      public @NonNull Builder setX(@NonNull Double setterArg) {
        this.x = setterArg;
        return this;
      }

      private @Nullable Double y;

      public @NonNull Builder setY(@NonNull Double setterArg) {
        this.y = setterArg;
        return this;
      }

      private @Nullable Double width;

      public @NonNull Builder setWidth(@NonNull Double setterArg) {
        this.width = setterArg;
        return this;
      }

      private @Nullable Double height;

      public @NonNull Builder setHeight(@NonNull Double setterArg) {
        this.height = setterArg;
        return this;
      }

      public @NonNull NormalizedFaceBbox build() {
        NormalizedFaceBbox pigeonReturn = new NormalizedFaceBbox();
        pigeonReturn.setX(x);
        pigeonReturn.setY(y);
        pigeonReturn.setWidth(width);
        pigeonReturn.setHeight(height);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(x);
      toListResult.add(y);
      toListResult.add(width);
      toListResult.add(height);
      return toListResult;
    }

    static @NonNull NormalizedFaceBbox fromList(@NonNull ArrayList<Object> list) {
      NormalizedFaceBbox pigeonResult = new NormalizedFaceBbox();
      Object x = list.get(0);
      pigeonResult.setX((Double) x);
      Object y = list.get(1);
      pigeonResult.setY((Double) y);
      Object width = list.get(2);
      pigeonResult.setWidth((Double) width);
      Object height = list.get(3);
      pigeonResult.setHeight((Double) height);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MeasurementStateResponse {
    private @NonNull MeasurementState state;

    public @NonNull MeasurementState getState() {
      return state;
    }

    public void setState(@NonNull MeasurementState setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"state\" is null.");
      }
      this.state = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    MeasurementStateResponse() {}

    public static final class Builder {

      private @Nullable MeasurementState state;

      public @NonNull Builder setState(@NonNull MeasurementState setterArg) {
        this.state = setterArg;
        return this;
      }

      public @NonNull MeasurementStateResponse build() {
        MeasurementStateResponse pigeonReturn = new MeasurementStateResponse();
        pigeonReturn.setState(state);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(state == null ? null : state.index);
      return toListResult;
    }

    static @NonNull MeasurementStateResponse fromList(@NonNull ArrayList<Object> list) {
      MeasurementStateResponse pigeonResult = new MeasurementStateResponse();
      Object state = list.get(0);
      pigeonResult.setState(MeasurementState.values()[(int) state]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Heartbeat {
    private @NonNull Double start_location_sec;

    public @NonNull Double getStart_location_sec() {
      return start_location_sec;
    }

    public void setStart_location_sec(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"start_location_sec\" is null.");
      }
      this.start_location_sec = setterArg;
    }

    private @NonNull Double end_location_sec;

    public @NonNull Double getEnd_location_sec() {
      return end_location_sec;
    }

    public void setEnd_location_sec(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"end_location_sec\" is null.");
      }
      this.end_location_sec = setterArg;
    }

    private @NonNull Double duration_ms;

    public @NonNull Double getDuration_ms() {
      return duration_ms;
    }

    public void setDuration_ms(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"duration_ms\" is null.");
      }
      this.duration_ms = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    Heartbeat() {}

    public static final class Builder {

      private @Nullable Double start_location_sec;

      public @NonNull Builder setStart_location_sec(@NonNull Double setterArg) {
        this.start_location_sec = setterArg;
        return this;
      }

      private @Nullable Double end_location_sec;

      public @NonNull Builder setEnd_location_sec(@NonNull Double setterArg) {
        this.end_location_sec = setterArg;
        return this;
      }

      private @Nullable Double duration_ms;

      public @NonNull Builder setDuration_ms(@NonNull Double setterArg) {
        this.duration_ms = setterArg;
        return this;
      }

      public @NonNull Heartbeat build() {
        Heartbeat pigeonReturn = new Heartbeat();
        pigeonReturn.setStart_location_sec(start_location_sec);
        pigeonReturn.setEnd_location_sec(end_location_sec);
        pigeonReturn.setDuration_ms(duration_ms);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(start_location_sec);
      toListResult.add(end_location_sec);
      toListResult.add(duration_ms);
      return toListResult;
    }

    static @NonNull Heartbeat fromList(@NonNull ArrayList<Object> list) {
      Heartbeat pigeonResult = new Heartbeat();
      Object start_location_sec = list.get(0);
      pigeonResult.setStart_location_sec((Double) start_location_sec);
      Object end_location_sec = list.get(1);
      pigeonResult.setEnd_location_sec((Double) end_location_sec);
      Object duration_ms = list.get(2);
      pigeonResult.setDuration_ms((Double) duration_ms);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MeasurementResults {
    private @NonNull Double heart_rate_bpm;

    public @NonNull Double getHeart_rate_bpm() {
      return heart_rate_bpm;
    }

    public void setHeart_rate_bpm(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"heart_rate_bpm\" is null.");
      }
      this.heart_rate_bpm = setterArg;
    }

    private @Nullable Double hrv_sdnn_ms;

    public @Nullable Double getHrv_sdnn_ms() {
      return hrv_sdnn_ms;
    }

    public void setHrv_sdnn_ms(@Nullable Double setterArg) {
      this.hrv_sdnn_ms = setterArg;
    }

    private @Nullable Double hrv_lnrmssd_ms;

    public @Nullable Double getHrv_lnrmssd_ms() {
      return hrv_lnrmssd_ms;
    }

    public void setHrv_lnrmssd_ms(@Nullable Double setterArg) {
      this.hrv_lnrmssd_ms = setterArg;
    }

    private @Nullable Double stress_index;

    public @Nullable Double getStress_index() {
      return stress_index;
    }

    public void setStress_index(@Nullable Double setterArg) {
      this.stress_index = setterArg;
    }

    private @Nullable Double breathing_rate_bpm;

    public @Nullable Double getBreathing_rate_bpm() {
      return breathing_rate_bpm;
    }

    public void setBreathing_rate_bpm(@Nullable Double setterArg) {
      this.breathing_rate_bpm = setterArg;
    }

    private @Nullable Double systolic_blood_pressure_mmhg;

    public @Nullable Double getSystolic_blood_pressure_mmhg() {
      return systolic_blood_pressure_mmhg;
    }

    public void setSystolic_blood_pressure_mmhg(@Nullable Double setterArg) {
      this.systolic_blood_pressure_mmhg = setterArg;
    }

    private @Nullable Double diastolic_blood_pressure_mmhg;

    public @Nullable Double getDiastolic_blood_pressure_mmhg() {
      return diastolic_blood_pressure_mmhg;
    }

    public void setDiastolic_blood_pressure_mmhg(@Nullable Double setterArg) {
      this.diastolic_blood_pressure_mmhg = setterArg;
    }

    private @NonNull List<Heartbeat> heartbeats;

    public @NonNull List<Heartbeat> getHeartbeats() {
      return heartbeats;
    }

    public void setHeartbeats(@NonNull List<Heartbeat> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"heartbeats\" is null.");
      }
      this.heartbeats = setterArg;
    }

    private @NonNull Double average_signal_quality;

    public @NonNull Double getAverage_signal_quality() {
      return average_signal_quality;
    }

    public void setAverage_signal_quality(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"average_signal_quality\" is null.");
      }
      this.average_signal_quality = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    MeasurementResults() {}

    public static final class Builder {

      private @Nullable Double heart_rate_bpm;

      public @NonNull Builder setHeart_rate_bpm(@NonNull Double setterArg) {
        this.heart_rate_bpm = setterArg;
        return this;
      }

      private @Nullable Double hrv_sdnn_ms;

      public @NonNull Builder setHrv_sdnn_ms(@Nullable Double setterArg) {
        this.hrv_sdnn_ms = setterArg;
        return this;
      }

      private @Nullable Double hrv_lnrmssd_ms;

      public @NonNull Builder setHrv_lnrmssd_ms(@Nullable Double setterArg) {
        this.hrv_lnrmssd_ms = setterArg;
        return this;
      }

      private @Nullable Double stress_index;

      public @NonNull Builder setStress_index(@Nullable Double setterArg) {
        this.stress_index = setterArg;
        return this;
      }

      private @Nullable Double breathing_rate_bpm;

      public @NonNull Builder setBreathing_rate_bpm(@Nullable Double setterArg) {
        this.breathing_rate_bpm = setterArg;
        return this;
      }

      private @Nullable Double systolic_blood_pressure_mmhg;

      public @NonNull Builder setSystolic_blood_pressure_mmhg(@Nullable Double setterArg) {
        this.systolic_blood_pressure_mmhg = setterArg;
        return this;
      }

      private @Nullable Double diastolic_blood_pressure_mmhg;

      public @NonNull Builder setDiastolic_blood_pressure_mmhg(@Nullable Double setterArg) {
        this.diastolic_blood_pressure_mmhg = setterArg;
        return this;
      }

      private @Nullable List<Heartbeat> heartbeats;

      public @NonNull Builder setHeartbeats(@NonNull List<Heartbeat> setterArg) {
        this.heartbeats = setterArg;
        return this;
      }

      private @Nullable Double average_signal_quality;

      public @NonNull Builder setAverage_signal_quality(@NonNull Double setterArg) {
        this.average_signal_quality = setterArg;
        return this;
      }

      public @NonNull MeasurementResults build() {
        MeasurementResults pigeonReturn = new MeasurementResults();
        pigeonReturn.setHeart_rate_bpm(heart_rate_bpm);
        pigeonReturn.setHrv_sdnn_ms(hrv_sdnn_ms);
        pigeonReturn.setHrv_lnrmssd_ms(hrv_lnrmssd_ms);
        pigeonReturn.setStress_index(stress_index);
        pigeonReturn.setBreathing_rate_bpm(breathing_rate_bpm);
        pigeonReturn.setSystolic_blood_pressure_mmhg(systolic_blood_pressure_mmhg);
        pigeonReturn.setDiastolic_blood_pressure_mmhg(diastolic_blood_pressure_mmhg);
        pigeonReturn.setHeartbeats(heartbeats);
        pigeonReturn.setAverage_signal_quality(average_signal_quality);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(9);
      toListResult.add(heart_rate_bpm);
      toListResult.add(hrv_sdnn_ms);
      toListResult.add(hrv_lnrmssd_ms);
      toListResult.add(stress_index);
      toListResult.add(breathing_rate_bpm);
      toListResult.add(systolic_blood_pressure_mmhg);
      toListResult.add(diastolic_blood_pressure_mmhg);
      toListResult.add(heartbeats);
      toListResult.add(average_signal_quality);
      return toListResult;
    }

    static @NonNull MeasurementResults fromList(@NonNull ArrayList<Object> list) {
      MeasurementResults pigeonResult = new MeasurementResults();
      Object heart_rate_bpm = list.get(0);
      pigeonResult.setHeart_rate_bpm((Double) heart_rate_bpm);
      Object hrv_sdnn_ms = list.get(1);
      pigeonResult.setHrv_sdnn_ms((Double) hrv_sdnn_ms);
      Object hrv_lnrmssd_ms = list.get(2);
      pigeonResult.setHrv_lnrmssd_ms((Double) hrv_lnrmssd_ms);
      Object stress_index = list.get(3);
      pigeonResult.setStress_index((Double) stress_index);
      Object breathing_rate_bpm = list.get(4);
      pigeonResult.setBreathing_rate_bpm((Double) breathing_rate_bpm);
      Object systolic_blood_pressure_mmhg = list.get(5);
      pigeonResult.setSystolic_blood_pressure_mmhg((Double) systolic_blood_pressure_mmhg);
      Object diastolic_blood_pressure_mmhg = list.get(6);
      pigeonResult.setDiastolic_blood_pressure_mmhg((Double) diastolic_blood_pressure_mmhg);
      Object heartbeats = list.get(7);
      pigeonResult.setHeartbeats((List<Heartbeat>) heartbeats);
      Object average_signal_quality = list.get(8);
      pigeonResult.setAverage_signal_quality((Double) average_signal_quality);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class InitializationSettings {
    private @Nullable PrecisionMode precisionMode;

    public @Nullable PrecisionMode getPrecisionMode() {
      return precisionMode;
    }

    public void setPrecisionMode(@Nullable PrecisionMode setterArg) {
      this.precisionMode = setterArg;
    }

    private @Nullable OperatingMode operatingMode;

    public @Nullable OperatingMode getOperatingMode() {
      return operatingMode;
    }

    public void setOperatingMode(@Nullable OperatingMode setterArg) {
      this.operatingMode = setterArg;
    }

    private @Nullable MeasurementPreset measurementPreset;

    public @Nullable MeasurementPreset getMeasurementPreset() {
      return measurementPreset;
    }

    public void setMeasurementPreset(@Nullable MeasurementPreset setterArg) {
      this.measurementPreset = setterArg;
    }

    private @Nullable CameraMode cameraMode;

    public @Nullable CameraMode getCameraMode() {
      return cameraMode;
    }

    public void setCameraMode(@Nullable CameraMode setterArg) {
      this.cameraMode = setterArg;
    }

    private @Nullable OnboardingMode onboardingMode;

    public @Nullable OnboardingMode getOnboardingMode() {
      return onboardingMode;
    }

    public void setOnboardingMode(@Nullable OnboardingMode setterArg) {
      this.onboardingMode = setterArg;
    }

    private @Nullable Boolean showUserInterface;

    public @Nullable Boolean getShowUserInterface() {
      return showUserInterface;
    }

    public void setShowUserInterface(@Nullable Boolean setterArg) {
      this.showUserInterface = setterArg;
    }

    private @Nullable Boolean showFacePositioningOverlay;

    public @Nullable Boolean getShowFacePositioningOverlay() {
      return showFacePositioningOverlay;
    }

    public void setShowFacePositioningOverlay(@Nullable Boolean setterArg) {
      this.showFacePositioningOverlay = setterArg;
    }

    private @Nullable Boolean showVisualWarnings;

    public @Nullable Boolean getShowVisualWarnings() {
      return showVisualWarnings;
    }

    public void setShowVisualWarnings(@Nullable Boolean setterArg) {
      this.showVisualWarnings = setterArg;
    }

    private @Nullable Boolean enableCameraSwap;

    public @Nullable Boolean getEnableCameraSwap() {
      return enableCameraSwap;
    }

    public void setEnableCameraSwap(@Nullable Boolean setterArg) {
      this.enableCameraSwap = setterArg;
    }

    private @Nullable Boolean showFaceMask;

    public @Nullable Boolean getShowFaceMask() {
      return showFaceMask;
    }

    public void setShowFaceMask(@Nullable Boolean setterArg) {
      this.showFaceMask = setterArg;
    }

    private @Nullable Boolean showBloodFlow;

    public @Nullable Boolean getShowBloodFlow() {
      return showBloodFlow;
    }

    public void setShowBloodFlow(@Nullable Boolean setterArg) {
      this.showBloodFlow = setterArg;
    }

    private @Nullable Boolean proVersionLock;

    public @Nullable Boolean getProVersionLock() {
      return proVersionLock;
    }

    public void setProVersionLock(@Nullable Boolean setterArg) {
      this.proVersionLock = setterArg;
    }

    private @Nullable Boolean hideShenaiLogo;

    public @Nullable Boolean getHideShenaiLogo() {
      return hideShenaiLogo;
    }

    public void setHideShenaiLogo(@Nullable Boolean setterArg) {
      this.hideShenaiLogo = setterArg;
    }

    public static final class Builder {

      private @Nullable PrecisionMode precisionMode;

      public @NonNull Builder setPrecisionMode(@Nullable PrecisionMode setterArg) {
        this.precisionMode = setterArg;
        return this;
      }

      private @Nullable OperatingMode operatingMode;

      public @NonNull Builder setOperatingMode(@Nullable OperatingMode setterArg) {
        this.operatingMode = setterArg;
        return this;
      }

      private @Nullable MeasurementPreset measurementPreset;

      public @NonNull Builder setMeasurementPreset(@Nullable MeasurementPreset setterArg) {
        this.measurementPreset = setterArg;
        return this;
      }

      private @Nullable CameraMode cameraMode;

      public @NonNull Builder setCameraMode(@Nullable CameraMode setterArg) {
        this.cameraMode = setterArg;
        return this;
      }

      private @Nullable OnboardingMode onboardingMode;

      public @NonNull Builder setOnboardingMode(@Nullable OnboardingMode setterArg) {
        this.onboardingMode = setterArg;
        return this;
      }

      private @Nullable Boolean showUserInterface;

      public @NonNull Builder setShowUserInterface(@Nullable Boolean setterArg) {
        this.showUserInterface = setterArg;
        return this;
      }

      private @Nullable Boolean showFacePositioningOverlay;

      public @NonNull Builder setShowFacePositioningOverlay(@Nullable Boolean setterArg) {
        this.showFacePositioningOverlay = setterArg;
        return this;
      }

      private @Nullable Boolean showVisualWarnings;

      public @NonNull Builder setShowVisualWarnings(@Nullable Boolean setterArg) {
        this.showVisualWarnings = setterArg;
        return this;
      }

      private @Nullable Boolean enableCameraSwap;

      public @NonNull Builder setEnableCameraSwap(@Nullable Boolean setterArg) {
        this.enableCameraSwap = setterArg;
        return this;
      }

      private @Nullable Boolean showFaceMask;

      public @NonNull Builder setShowFaceMask(@Nullable Boolean setterArg) {
        this.showFaceMask = setterArg;
        return this;
      }

      private @Nullable Boolean showBloodFlow;

      public @NonNull Builder setShowBloodFlow(@Nullable Boolean setterArg) {
        this.showBloodFlow = setterArg;
        return this;
      }

      private @Nullable Boolean proVersionLock;

      public @NonNull Builder setProVersionLock(@Nullable Boolean setterArg) {
        this.proVersionLock = setterArg;
        return this;
      }

      private @Nullable Boolean hideShenaiLogo;

      public @NonNull Builder setHideShenaiLogo(@Nullable Boolean setterArg) {
        this.hideShenaiLogo = setterArg;
        return this;
      }

      public @NonNull InitializationSettings build() {
        InitializationSettings pigeonReturn = new InitializationSettings();
        pigeonReturn.setPrecisionMode(precisionMode);
        pigeonReturn.setOperatingMode(operatingMode);
        pigeonReturn.setMeasurementPreset(measurementPreset);
        pigeonReturn.setCameraMode(cameraMode);
        pigeonReturn.setOnboardingMode(onboardingMode);
        pigeonReturn.setShowUserInterface(showUserInterface);
        pigeonReturn.setShowFacePositioningOverlay(showFacePositioningOverlay);
        pigeonReturn.setShowVisualWarnings(showVisualWarnings);
        pigeonReturn.setEnableCameraSwap(enableCameraSwap);
        pigeonReturn.setShowFaceMask(showFaceMask);
        pigeonReturn.setShowBloodFlow(showBloodFlow);
        pigeonReturn.setProVersionLock(proVersionLock);
        pigeonReturn.setHideShenaiLogo(hideShenaiLogo);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(13);
      toListResult.add(precisionMode == null ? null : precisionMode.index);
      toListResult.add(operatingMode == null ? null : operatingMode.index);
      toListResult.add(measurementPreset == null ? null : measurementPreset.index);
      toListResult.add(cameraMode == null ? null : cameraMode.index);
      toListResult.add(onboardingMode == null ? null : onboardingMode.index);
      toListResult.add(showUserInterface);
      toListResult.add(showFacePositioningOverlay);
      toListResult.add(showVisualWarnings);
      toListResult.add(enableCameraSwap);
      toListResult.add(showFaceMask);
      toListResult.add(showBloodFlow);
      toListResult.add(proVersionLock);
      toListResult.add(hideShenaiLogo);
      return toListResult;
    }

    static @NonNull InitializationSettings fromList(@NonNull ArrayList<Object> list) {
      InitializationSettings pigeonResult = new InitializationSettings();
      Object precisionMode = list.get(0);
      pigeonResult.setPrecisionMode(precisionMode == null ? null : PrecisionMode.values()[(int) precisionMode]);
      Object operatingMode = list.get(1);
      pigeonResult.setOperatingMode(operatingMode == null ? null : OperatingMode.values()[(int) operatingMode]);
      Object measurementPreset = list.get(2);
      pigeonResult.setMeasurementPreset(measurementPreset == null ? null : MeasurementPreset.values()[(int) measurementPreset]);
      Object cameraMode = list.get(3);
      pigeonResult.setCameraMode(cameraMode == null ? null : CameraMode.values()[(int) cameraMode]);
      Object onboardingMode = list.get(4);
      pigeonResult.setOnboardingMode(onboardingMode == null ? null : OnboardingMode.values()[(int) onboardingMode]);
      Object showUserInterface = list.get(5);
      pigeonResult.setShowUserInterface((Boolean) showUserInterface);
      Object showFacePositioningOverlay = list.get(6);
      pigeonResult.setShowFacePositioningOverlay((Boolean) showFacePositioningOverlay);
      Object showVisualWarnings = list.get(7);
      pigeonResult.setShowVisualWarnings((Boolean) showVisualWarnings);
      Object enableCameraSwap = list.get(8);
      pigeonResult.setEnableCameraSwap((Boolean) enableCameraSwap);
      Object showFaceMask = list.get(9);
      pigeonResult.setShowFaceMask((Boolean) showFaceMask);
      Object showBloodFlow = list.get(10);
      pigeonResult.setShowBloodFlow((Boolean) showBloodFlow);
      Object proVersionLock = list.get(11);
      pigeonResult.setProVersionLock((Boolean) proVersionLock);
      Object hideShenaiLogo = list.get(12);
      pigeonResult.setHideShenaiLogo((Boolean) hideShenaiLogo);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CustomMeasurementConfig {
    private @Nullable Double durationSeconds;

    public @Nullable Double getDurationSeconds() {
      return durationSeconds;
    }

    public void setDurationSeconds(@Nullable Double setterArg) {
      this.durationSeconds = setterArg;
    }

    private @Nullable Boolean infiniteMeasurement;

    public @Nullable Boolean getInfiniteMeasurement() {
      return infiniteMeasurement;
    }

    public void setInfiniteMeasurement(@Nullable Boolean setterArg) {
      this.infiniteMeasurement = setterArg;
    }

    private @Nullable Boolean showHeartRate;

    public @Nullable Boolean getShowHeartRate() {
      return showHeartRate;
    }

    public void setShowHeartRate(@Nullable Boolean setterArg) {
      this.showHeartRate = setterArg;
    }

    private @Nullable Boolean showHrvSdnn;

    public @Nullable Boolean getShowHrvSdnn() {
      return showHrvSdnn;
    }

    public void setShowHrvSdnn(@Nullable Boolean setterArg) {
      this.showHrvSdnn = setterArg;
    }

    private @Nullable Boolean showBreathingRate;

    public @Nullable Boolean getShowBreathingRate() {
      return showBreathingRate;
    }

    public void setShowBreathingRate(@Nullable Boolean setterArg) {
      this.showBreathingRate = setterArg;
    }

    private @Nullable Boolean showSystolicBloodPressure;

    public @Nullable Boolean getShowSystolicBloodPressure() {
      return showSystolicBloodPressure;
    }

    public void setShowSystolicBloodPressure(@Nullable Boolean setterArg) {
      this.showSystolicBloodPressure = setterArg;
    }

    private @Nullable Boolean showDiastolicBloodPressure;

    public @Nullable Boolean getShowDiastolicBloodPressure() {
      return showDiastolicBloodPressure;
    }

    public void setShowDiastolicBloodPressure(@Nullable Boolean setterArg) {
      this.showDiastolicBloodPressure = setterArg;
    }

    private @Nullable Boolean showCardiacStress;

    public @Nullable Boolean getShowCardiacStress() {
      return showCardiacStress;
    }

    public void setShowCardiacStress(@Nullable Boolean setterArg) {
      this.showCardiacStress = setterArg;
    }

    private @Nullable Double realtimeHrPeriodSeconds;

    public @Nullable Double getRealtimeHrPeriodSeconds() {
      return realtimeHrPeriodSeconds;
    }

    public void setRealtimeHrPeriodSeconds(@Nullable Double setterArg) {
      this.realtimeHrPeriodSeconds = setterArg;
    }

    private @Nullable Double realtimeHrvPeriodSeconds;

    public @Nullable Double getRealtimeHrvPeriodSeconds() {
      return realtimeHrvPeriodSeconds;
    }

    public void setRealtimeHrvPeriodSeconds(@Nullable Double setterArg) {
      this.realtimeHrvPeriodSeconds = setterArg;
    }

    private @Nullable Double realtimeCardiacStressPeriodSeconds;

    public @Nullable Double getRealtimeCardiacStressPeriodSeconds() {
      return realtimeCardiacStressPeriodSeconds;
    }

    public void setRealtimeCardiacStressPeriodSeconds(@Nullable Double setterArg) {
      this.realtimeCardiacStressPeriodSeconds = setterArg;
    }

    public static final class Builder {

      private @Nullable Double durationSeconds;

      public @NonNull Builder setDurationSeconds(@Nullable Double setterArg) {
        this.durationSeconds = setterArg;
        return this;
      }

      private @Nullable Boolean infiniteMeasurement;

      public @NonNull Builder setInfiniteMeasurement(@Nullable Boolean setterArg) {
        this.infiniteMeasurement = setterArg;
        return this;
      }

      private @Nullable Boolean showHeartRate;

      public @NonNull Builder setShowHeartRate(@Nullable Boolean setterArg) {
        this.showHeartRate = setterArg;
        return this;
      }

      private @Nullable Boolean showHrvSdnn;

      public @NonNull Builder setShowHrvSdnn(@Nullable Boolean setterArg) {
        this.showHrvSdnn = setterArg;
        return this;
      }

      private @Nullable Boolean showBreathingRate;

      public @NonNull Builder setShowBreathingRate(@Nullable Boolean setterArg) {
        this.showBreathingRate = setterArg;
        return this;
      }

      private @Nullable Boolean showSystolicBloodPressure;

      public @NonNull Builder setShowSystolicBloodPressure(@Nullable Boolean setterArg) {
        this.showSystolicBloodPressure = setterArg;
        return this;
      }

      private @Nullable Boolean showDiastolicBloodPressure;

      public @NonNull Builder setShowDiastolicBloodPressure(@Nullable Boolean setterArg) {
        this.showDiastolicBloodPressure = setterArg;
        return this;
      }

      private @Nullable Boolean showCardiacStress;

      public @NonNull Builder setShowCardiacStress(@Nullable Boolean setterArg) {
        this.showCardiacStress = setterArg;
        return this;
      }

      private @Nullable Double realtimeHrPeriodSeconds;

      public @NonNull Builder setRealtimeHrPeriodSeconds(@Nullable Double setterArg) {
        this.realtimeHrPeriodSeconds = setterArg;
        return this;
      }

      private @Nullable Double realtimeHrvPeriodSeconds;

      public @NonNull Builder setRealtimeHrvPeriodSeconds(@Nullable Double setterArg) {
        this.realtimeHrvPeriodSeconds = setterArg;
        return this;
      }

      private @Nullable Double realtimeCardiacStressPeriodSeconds;

      public @NonNull Builder setRealtimeCardiacStressPeriodSeconds(@Nullable Double setterArg) {
        this.realtimeCardiacStressPeriodSeconds = setterArg;
        return this;
      }

      public @NonNull CustomMeasurementConfig build() {
        CustomMeasurementConfig pigeonReturn = new CustomMeasurementConfig();
        pigeonReturn.setDurationSeconds(durationSeconds);
        pigeonReturn.setInfiniteMeasurement(infiniteMeasurement);
        pigeonReturn.setShowHeartRate(showHeartRate);
        pigeonReturn.setShowHrvSdnn(showHrvSdnn);
        pigeonReturn.setShowBreathingRate(showBreathingRate);
        pigeonReturn.setShowSystolicBloodPressure(showSystolicBloodPressure);
        pigeonReturn.setShowDiastolicBloodPressure(showDiastolicBloodPressure);
        pigeonReturn.setShowCardiacStress(showCardiacStress);
        pigeonReturn.setRealtimeHrPeriodSeconds(realtimeHrPeriodSeconds);
        pigeonReturn.setRealtimeHrvPeriodSeconds(realtimeHrvPeriodSeconds);
        pigeonReturn.setRealtimeCardiacStressPeriodSeconds(realtimeCardiacStressPeriodSeconds);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(11);
      toListResult.add(durationSeconds);
      toListResult.add(infiniteMeasurement);
      toListResult.add(showHeartRate);
      toListResult.add(showHrvSdnn);
      toListResult.add(showBreathingRate);
      toListResult.add(showSystolicBloodPressure);
      toListResult.add(showDiastolicBloodPressure);
      toListResult.add(showCardiacStress);
      toListResult.add(realtimeHrPeriodSeconds);
      toListResult.add(realtimeHrvPeriodSeconds);
      toListResult.add(realtimeCardiacStressPeriodSeconds);
      return toListResult;
    }

    static @NonNull CustomMeasurementConfig fromList(@NonNull ArrayList<Object> list) {
      CustomMeasurementConfig pigeonResult = new CustomMeasurementConfig();
      Object durationSeconds = list.get(0);
      pigeonResult.setDurationSeconds((Double) durationSeconds);
      Object infiniteMeasurement = list.get(1);
      pigeonResult.setInfiniteMeasurement((Boolean) infiniteMeasurement);
      Object showHeartRate = list.get(2);
      pigeonResult.setShowHeartRate((Boolean) showHeartRate);
      Object showHrvSdnn = list.get(3);
      pigeonResult.setShowHrvSdnn((Boolean) showHrvSdnn);
      Object showBreathingRate = list.get(4);
      pigeonResult.setShowBreathingRate((Boolean) showBreathingRate);
      Object showSystolicBloodPressure = list.get(5);
      pigeonResult.setShowSystolicBloodPressure((Boolean) showSystolicBloodPressure);
      Object showDiastolicBloodPressure = list.get(6);
      pigeonResult.setShowDiastolicBloodPressure((Boolean) showDiastolicBloodPressure);
      Object showCardiacStress = list.get(7);
      pigeonResult.setShowCardiacStress((Boolean) showCardiacStress);
      Object realtimeHrPeriodSeconds = list.get(8);
      pigeonResult.setRealtimeHrPeriodSeconds((Double) realtimeHrPeriodSeconds);
      Object realtimeHrvPeriodSeconds = list.get(9);
      pigeonResult.setRealtimeHrvPeriodSeconds((Double) realtimeHrvPeriodSeconds);
      Object realtimeCardiacStressPeriodSeconds = list.get(10);
      pigeonResult.setRealtimeCardiacStressPeriodSeconds((Double) realtimeCardiacStressPeriodSeconds);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CustomColorTheme {
    private @Nullable String themeColor;

    public @Nullable String getThemeColor() {
      return themeColor;
    }

    public void setThemeColor(@Nullable String setterArg) {
      this.themeColor = setterArg;
    }

    private @Nullable String textColor;

    public @Nullable String getTextColor() {
      return textColor;
    }

    public void setTextColor(@Nullable String setterArg) {
      this.textColor = setterArg;
    }

    private @Nullable String backgroundColor;

    public @Nullable String getBackgroundColor() {
      return backgroundColor;
    }

    public void setBackgroundColor(@Nullable String setterArg) {
      this.backgroundColor = setterArg;
    }

    private @Nullable String tileColor;

    public @Nullable String getTileColor() {
      return tileColor;
    }

    public void setTileColor(@Nullable String setterArg) {
      this.tileColor = setterArg;
    }

    public static final class Builder {

      private @Nullable String themeColor;

      public @NonNull Builder setThemeColor(@Nullable String setterArg) {
        this.themeColor = setterArg;
        return this;
      }

      private @Nullable String textColor;

      public @NonNull Builder setTextColor(@Nullable String setterArg) {
        this.textColor = setterArg;
        return this;
      }

      private @Nullable String backgroundColor;

      public @NonNull Builder setBackgroundColor(@Nullable String setterArg) {
        this.backgroundColor = setterArg;
        return this;
      }

      private @Nullable String tileColor;

      public @NonNull Builder setTileColor(@Nullable String setterArg) {
        this.tileColor = setterArg;
        return this;
      }

      public @NonNull CustomColorTheme build() {
        CustomColorTheme pigeonReturn = new CustomColorTheme();
        pigeonReturn.setThemeColor(themeColor);
        pigeonReturn.setTextColor(textColor);
        pigeonReturn.setBackgroundColor(backgroundColor);
        pigeonReturn.setTileColor(tileColor);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(themeColor);
      toListResult.add(textColor);
      toListResult.add(backgroundColor);
      toListResult.add(tileColor);
      return toListResult;
    }

    static @NonNull CustomColorTheme fromList(@NonNull ArrayList<Object> list) {
      CustomColorTheme pigeonResult = new CustomColorTheme();
      Object themeColor = list.get(0);
      pigeonResult.setThemeColor((String) themeColor);
      Object textColor = list.get(1);
      pigeonResult.setTextColor((String) textColor);
      Object backgroundColor = list.get(2);
      pigeonResult.setBackgroundColor((String) backgroundColor);
      Object tileColor = list.get(3);
      pigeonResult.setTileColor((String) tileColor);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RisksFactors {
    private @Nullable Long age;

    public @Nullable Long getAge() {
      return age;
    }

    public void setAge(@Nullable Long setterArg) {
      this.age = setterArg;
    }

    private @Nullable Double cholesterol;

    public @Nullable Double getCholesterol() {
      return cholesterol;
    }

    public void setCholesterol(@Nullable Double setterArg) {
      this.cholesterol = setterArg;
    }

    private @Nullable Double cholesterolHdl;

    public @Nullable Double getCholesterolHdl() {
      return cholesterolHdl;
    }

    public void setCholesterolHdl(@Nullable Double setterArg) {
      this.cholesterolHdl = setterArg;
    }

    private @Nullable Double sbp;

    public @Nullable Double getSbp() {
      return sbp;
    }

    public void setSbp(@Nullable Double setterArg) {
      this.sbp = setterArg;
    }

    private @Nullable Boolean isSmoker;

    public @Nullable Boolean getIsSmoker() {
      return isSmoker;
    }

    public void setIsSmoker(@Nullable Boolean setterArg) {
      this.isSmoker = setterArg;
    }

    private @Nullable Boolean hypertensionTreatment;

    public @Nullable Boolean getHypertensionTreatment() {
      return hypertensionTreatment;
    }

    public void setHypertensionTreatment(@Nullable Boolean setterArg) {
      this.hypertensionTreatment = setterArg;
    }

    private @Nullable Boolean hasDiabetes;

    public @Nullable Boolean getHasDiabetes() {
      return hasDiabetes;
    }

    public void setHasDiabetes(@Nullable Boolean setterArg) {
      this.hasDiabetes = setterArg;
    }

    private @Nullable Double bodyHeight;

    public @Nullable Double getBodyHeight() {
      return bodyHeight;
    }

    public void setBodyHeight(@Nullable Double setterArg) {
      this.bodyHeight = setterArg;
    }

    private @Nullable Double bodyWeight;

    public @Nullable Double getBodyWeight() {
      return bodyWeight;
    }

    public void setBodyWeight(@Nullable Double setterArg) {
      this.bodyWeight = setterArg;
    }

    private @Nullable Gender gender;

    public @Nullable Gender getGender() {
      return gender;
    }

    public void setGender(@Nullable Gender setterArg) {
      this.gender = setterArg;
    }

    private @Nullable String country;

    public @Nullable String getCountry() {
      return country;
    }

    public void setCountry(@Nullable String setterArg) {
      this.country = setterArg;
    }

    private @Nullable Race race;

    public @Nullable Race getRace() {
      return race;
    }

    public void setRace(@Nullable Race setterArg) {
      this.race = setterArg;
    }

    public static final class Builder {

      private @Nullable Long age;

      public @NonNull Builder setAge(@Nullable Long setterArg) {
        this.age = setterArg;
        return this;
      }

      private @Nullable Double cholesterol;

      public @NonNull Builder setCholesterol(@Nullable Double setterArg) {
        this.cholesterol = setterArg;
        return this;
      }

      private @Nullable Double cholesterolHdl;

      public @NonNull Builder setCholesterolHdl(@Nullable Double setterArg) {
        this.cholesterolHdl = setterArg;
        return this;
      }

      private @Nullable Double sbp;

      public @NonNull Builder setSbp(@Nullable Double setterArg) {
        this.sbp = setterArg;
        return this;
      }

      private @Nullable Boolean isSmoker;

      public @NonNull Builder setIsSmoker(@Nullable Boolean setterArg) {
        this.isSmoker = setterArg;
        return this;
      }

      private @Nullable Boolean hypertensionTreatment;

      public @NonNull Builder setHypertensionTreatment(@Nullable Boolean setterArg) {
        this.hypertensionTreatment = setterArg;
        return this;
      }

      private @Nullable Boolean hasDiabetes;

      public @NonNull Builder setHasDiabetes(@Nullable Boolean setterArg) {
        this.hasDiabetes = setterArg;
        return this;
      }

      private @Nullable Double bodyHeight;

      public @NonNull Builder setBodyHeight(@Nullable Double setterArg) {
        this.bodyHeight = setterArg;
        return this;
      }

      private @Nullable Double bodyWeight;

      public @NonNull Builder setBodyWeight(@Nullable Double setterArg) {
        this.bodyWeight = setterArg;
        return this;
      }

      private @Nullable Gender gender;

      public @NonNull Builder setGender(@Nullable Gender setterArg) {
        this.gender = setterArg;
        return this;
      }

      private @Nullable String country;

      public @NonNull Builder setCountry(@Nullable String setterArg) {
        this.country = setterArg;
        return this;
      }

      private @Nullable Race race;

      public @NonNull Builder setRace(@Nullable Race setterArg) {
        this.race = setterArg;
        return this;
      }

      public @NonNull RisksFactors build() {
        RisksFactors pigeonReturn = new RisksFactors();
        pigeonReturn.setAge(age);
        pigeonReturn.setCholesterol(cholesterol);
        pigeonReturn.setCholesterolHdl(cholesterolHdl);
        pigeonReturn.setSbp(sbp);
        pigeonReturn.setIsSmoker(isSmoker);
        pigeonReturn.setHypertensionTreatment(hypertensionTreatment);
        pigeonReturn.setHasDiabetes(hasDiabetes);
        pigeonReturn.setBodyHeight(bodyHeight);
        pigeonReturn.setBodyWeight(bodyWeight);
        pigeonReturn.setGender(gender);
        pigeonReturn.setCountry(country);
        pigeonReturn.setRace(race);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(12);
      toListResult.add(age);
      toListResult.add(cholesterol);
      toListResult.add(cholesterolHdl);
      toListResult.add(sbp);
      toListResult.add(isSmoker);
      toListResult.add(hypertensionTreatment);
      toListResult.add(hasDiabetes);
      toListResult.add(bodyHeight);
      toListResult.add(bodyWeight);
      toListResult.add(gender == null ? null : gender.index);
      toListResult.add(country);
      toListResult.add(race == null ? null : race.index);
      return toListResult;
    }

    static @NonNull RisksFactors fromList(@NonNull ArrayList<Object> list) {
      RisksFactors pigeonResult = new RisksFactors();
      Object age = list.get(0);
      pigeonResult.setAge((age == null) ? null : ((age instanceof Integer) ? (Integer) age : (Long) age));
      Object cholesterol = list.get(1);
      pigeonResult.setCholesterol((Double) cholesterol);
      Object cholesterolHdl = list.get(2);
      pigeonResult.setCholesterolHdl((Double) cholesterolHdl);
      Object sbp = list.get(3);
      pigeonResult.setSbp((Double) sbp);
      Object isSmoker = list.get(4);
      pigeonResult.setIsSmoker((Boolean) isSmoker);
      Object hypertensionTreatment = list.get(5);
      pigeonResult.setHypertensionTreatment((Boolean) hypertensionTreatment);
      Object hasDiabetes = list.get(6);
      pigeonResult.setHasDiabetes((Boolean) hasDiabetes);
      Object bodyHeight = list.get(7);
      pigeonResult.setBodyHeight((Double) bodyHeight);
      Object bodyWeight = list.get(8);
      pigeonResult.setBodyWeight((Double) bodyWeight);
      Object gender = list.get(9);
      pigeonResult.setGender(gender == null ? null : Gender.values()[(int) gender]);
      Object country = list.get(10);
      pigeonResult.setCountry((String) country);
      Object race = list.get(11);
      pigeonResult.setRace(race == null ? null : Race.values()[(int) race]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class HardAndFatalEventsRisks {
    private @Nullable Double coronaryDeathEventRisk;

    public @Nullable Double getCoronaryDeathEventRisk() {
      return coronaryDeathEventRisk;
    }

    public void setCoronaryDeathEventRisk(@Nullable Double setterArg) {
      this.coronaryDeathEventRisk = setterArg;
    }

    private @Nullable Double fatalStrokeEventRisk;

    public @Nullable Double getFatalStrokeEventRisk() {
      return fatalStrokeEventRisk;
    }

    public void setFatalStrokeEventRisk(@Nullable Double setterArg) {
      this.fatalStrokeEventRisk = setterArg;
    }

    private @Nullable Double totalCVMortalityRisk;

    public @Nullable Double getTotalCVMortalityRisk() {
      return totalCVMortalityRisk;
    }

    public void setTotalCVMortalityRisk(@Nullable Double setterArg) {
      this.totalCVMortalityRisk = setterArg;
    }

    private @Nullable Double hardCVEventRisk;

    public @Nullable Double getHardCVEventRisk() {
      return hardCVEventRisk;
    }

    public void setHardCVEventRisk(@Nullable Double setterArg) {
      this.hardCVEventRisk = setterArg;
    }

    public static final class Builder {

      private @Nullable Double coronaryDeathEventRisk;

      public @NonNull Builder setCoronaryDeathEventRisk(@Nullable Double setterArg) {
        this.coronaryDeathEventRisk = setterArg;
        return this;
      }

      private @Nullable Double fatalStrokeEventRisk;

      public @NonNull Builder setFatalStrokeEventRisk(@Nullable Double setterArg) {
        this.fatalStrokeEventRisk = setterArg;
        return this;
      }

      private @Nullable Double totalCVMortalityRisk;

      public @NonNull Builder setTotalCVMortalityRisk(@Nullable Double setterArg) {
        this.totalCVMortalityRisk = setterArg;
        return this;
      }

      private @Nullable Double hardCVEventRisk;

      public @NonNull Builder setHardCVEventRisk(@Nullable Double setterArg) {
        this.hardCVEventRisk = setterArg;
        return this;
      }

      public @NonNull HardAndFatalEventsRisks build() {
        HardAndFatalEventsRisks pigeonReturn = new HardAndFatalEventsRisks();
        pigeonReturn.setCoronaryDeathEventRisk(coronaryDeathEventRisk);
        pigeonReturn.setFatalStrokeEventRisk(fatalStrokeEventRisk);
        pigeonReturn.setTotalCVMortalityRisk(totalCVMortalityRisk);
        pigeonReturn.setHardCVEventRisk(hardCVEventRisk);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(coronaryDeathEventRisk);
      toListResult.add(fatalStrokeEventRisk);
      toListResult.add(totalCVMortalityRisk);
      toListResult.add(hardCVEventRisk);
      return toListResult;
    }

    static @NonNull HardAndFatalEventsRisks fromList(@NonNull ArrayList<Object> list) {
      HardAndFatalEventsRisks pigeonResult = new HardAndFatalEventsRisks();
      Object coronaryDeathEventRisk = list.get(0);
      pigeonResult.setCoronaryDeathEventRisk((Double) coronaryDeathEventRisk);
      Object fatalStrokeEventRisk = list.get(1);
      pigeonResult.setFatalStrokeEventRisk((Double) fatalStrokeEventRisk);
      Object totalCVMortalityRisk = list.get(2);
      pigeonResult.setTotalCVMortalityRisk((Double) totalCVMortalityRisk);
      Object hardCVEventRisk = list.get(3);
      pigeonResult.setHardCVEventRisk((Double) hardCVEventRisk);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CVDiseasesRisks {
    private @Nullable Double overallRisk;

    public @Nullable Double getOverallRisk() {
      return overallRisk;
    }

    public void setOverallRisk(@Nullable Double setterArg) {
      this.overallRisk = setterArg;
    }

    private @Nullable Double coronaryHeartDiseaseRisk;

    public @Nullable Double getCoronaryHeartDiseaseRisk() {
      return coronaryHeartDiseaseRisk;
    }

    public void setCoronaryHeartDiseaseRisk(@Nullable Double setterArg) {
      this.coronaryHeartDiseaseRisk = setterArg;
    }

    private @Nullable Double strokeRisk;

    public @Nullable Double getStrokeRisk() {
      return strokeRisk;
    }

    public void setStrokeRisk(@Nullable Double setterArg) {
      this.strokeRisk = setterArg;
    }

    private @Nullable Double heartFailureRisk;

    public @Nullable Double getHeartFailureRisk() {
      return heartFailureRisk;
    }

    public void setHeartFailureRisk(@Nullable Double setterArg) {
      this.heartFailureRisk = setterArg;
    }

    private @Nullable Double peripheralVascularDiseaseRisk;

    public @Nullable Double getPeripheralVascularDiseaseRisk() {
      return peripheralVascularDiseaseRisk;
    }

    public void setPeripheralVascularDiseaseRisk(@Nullable Double setterArg) {
      this.peripheralVascularDiseaseRisk = setterArg;
    }

    public static final class Builder {

      private @Nullable Double overallRisk;

      public @NonNull Builder setOverallRisk(@Nullable Double setterArg) {
        this.overallRisk = setterArg;
        return this;
      }

      private @Nullable Double coronaryHeartDiseaseRisk;

      public @NonNull Builder setCoronaryHeartDiseaseRisk(@Nullable Double setterArg) {
        this.coronaryHeartDiseaseRisk = setterArg;
        return this;
      }

      private @Nullable Double strokeRisk;

      public @NonNull Builder setStrokeRisk(@Nullable Double setterArg) {
        this.strokeRisk = setterArg;
        return this;
      }

      private @Nullable Double heartFailureRisk;

      public @NonNull Builder setHeartFailureRisk(@Nullable Double setterArg) {
        this.heartFailureRisk = setterArg;
        return this;
      }

      private @Nullable Double peripheralVascularDiseaseRisk;

      public @NonNull Builder setPeripheralVascularDiseaseRisk(@Nullable Double setterArg) {
        this.peripheralVascularDiseaseRisk = setterArg;
        return this;
      }

      public @NonNull CVDiseasesRisks build() {
        CVDiseasesRisks pigeonReturn = new CVDiseasesRisks();
        pigeonReturn.setOverallRisk(overallRisk);
        pigeonReturn.setCoronaryHeartDiseaseRisk(coronaryHeartDiseaseRisk);
        pigeonReturn.setStrokeRisk(strokeRisk);
        pigeonReturn.setHeartFailureRisk(heartFailureRisk);
        pigeonReturn.setPeripheralVascularDiseaseRisk(peripheralVascularDiseaseRisk);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(overallRisk);
      toListResult.add(coronaryHeartDiseaseRisk);
      toListResult.add(strokeRisk);
      toListResult.add(heartFailureRisk);
      toListResult.add(peripheralVascularDiseaseRisk);
      return toListResult;
    }

    static @NonNull CVDiseasesRisks fromList(@NonNull ArrayList<Object> list) {
      CVDiseasesRisks pigeonResult = new CVDiseasesRisks();
      Object overallRisk = list.get(0);
      pigeonResult.setOverallRisk((Double) overallRisk);
      Object coronaryHeartDiseaseRisk = list.get(1);
      pigeonResult.setCoronaryHeartDiseaseRisk((Double) coronaryHeartDiseaseRisk);
      Object strokeRisk = list.get(2);
      pigeonResult.setStrokeRisk((Double) strokeRisk);
      Object heartFailureRisk = list.get(3);
      pigeonResult.setHeartFailureRisk((Double) heartFailureRisk);
      Object peripheralVascularDiseaseRisk = list.get(4);
      pigeonResult.setPeripheralVascularDiseaseRisk((Double) peripheralVascularDiseaseRisk);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RisksFactorsScores {
    private @Nullable Long ageScore;

    public @Nullable Long getAgeScore() {
      return ageScore;
    }

    public void setAgeScore(@Nullable Long setterArg) {
      this.ageScore = setterArg;
    }

    private @Nullable Long sbpScore;

    public @Nullable Long getSbpScore() {
      return sbpScore;
    }

    public void setSbpScore(@Nullable Long setterArg) {
      this.sbpScore = setterArg;
    }

    private @Nullable Long smokingScore;

    public @Nullable Long getSmokingScore() {
      return smokingScore;
    }

    public void setSmokingScore(@Nullable Long setterArg) {
      this.smokingScore = setterArg;
    }

    private @Nullable Long diabetesScore;

    public @Nullable Long getDiabetesScore() {
      return diabetesScore;
    }

    public void setDiabetesScore(@Nullable Long setterArg) {
      this.diabetesScore = setterArg;
    }

    private @Nullable Long bmiScore;

    public @Nullable Long getBmiScore() {
      return bmiScore;
    }

    public void setBmiScore(@Nullable Long setterArg) {
      this.bmiScore = setterArg;
    }

    private @Nullable Long cholesterolScore;

    public @Nullable Long getCholesterolScore() {
      return cholesterolScore;
    }

    public void setCholesterolScore(@Nullable Long setterArg) {
      this.cholesterolScore = setterArg;
    }

    private @Nullable Long cholesterolHdlScore;

    public @Nullable Long getCholesterolHdlScore() {
      return cholesterolHdlScore;
    }

    public void setCholesterolHdlScore(@Nullable Long setterArg) {
      this.cholesterolHdlScore = setterArg;
    }

    private @Nullable Long totalScore;

    public @Nullable Long getTotalScore() {
      return totalScore;
    }

    public void setTotalScore(@Nullable Long setterArg) {
      this.totalScore = setterArg;
    }

    public static final class Builder {

      private @Nullable Long ageScore;

      public @NonNull Builder setAgeScore(@Nullable Long setterArg) {
        this.ageScore = setterArg;
        return this;
      }

      private @Nullable Long sbpScore;

      public @NonNull Builder setSbpScore(@Nullable Long setterArg) {
        this.sbpScore = setterArg;
        return this;
      }

      private @Nullable Long smokingScore;

      public @NonNull Builder setSmokingScore(@Nullable Long setterArg) {
        this.smokingScore = setterArg;
        return this;
      }

      private @Nullable Long diabetesScore;

      public @NonNull Builder setDiabetesScore(@Nullable Long setterArg) {
        this.diabetesScore = setterArg;
        return this;
      }

      private @Nullable Long bmiScore;

      public @NonNull Builder setBmiScore(@Nullable Long setterArg) {
        this.bmiScore = setterArg;
        return this;
      }

      private @Nullable Long cholesterolScore;

      public @NonNull Builder setCholesterolScore(@Nullable Long setterArg) {
        this.cholesterolScore = setterArg;
        return this;
      }

      private @Nullable Long cholesterolHdlScore;

      public @NonNull Builder setCholesterolHdlScore(@Nullable Long setterArg) {
        this.cholesterolHdlScore = setterArg;
        return this;
      }

      private @Nullable Long totalScore;

      public @NonNull Builder setTotalScore(@Nullable Long setterArg) {
        this.totalScore = setterArg;
        return this;
      }

      public @NonNull RisksFactorsScores build() {
        RisksFactorsScores pigeonReturn = new RisksFactorsScores();
        pigeonReturn.setAgeScore(ageScore);
        pigeonReturn.setSbpScore(sbpScore);
        pigeonReturn.setSmokingScore(smokingScore);
        pigeonReturn.setDiabetesScore(diabetesScore);
        pigeonReturn.setBmiScore(bmiScore);
        pigeonReturn.setCholesterolScore(cholesterolScore);
        pigeonReturn.setCholesterolHdlScore(cholesterolHdlScore);
        pigeonReturn.setTotalScore(totalScore);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(8);
      toListResult.add(ageScore);
      toListResult.add(sbpScore);
      toListResult.add(smokingScore);
      toListResult.add(diabetesScore);
      toListResult.add(bmiScore);
      toListResult.add(cholesterolScore);
      toListResult.add(cholesterolHdlScore);
      toListResult.add(totalScore);
      return toListResult;
    }

    static @NonNull RisksFactorsScores fromList(@NonNull ArrayList<Object> list) {
      RisksFactorsScores pigeonResult = new RisksFactorsScores();
      Object ageScore = list.get(0);
      pigeonResult.setAgeScore((ageScore == null) ? null : ((ageScore instanceof Integer) ? (Integer) ageScore : (Long) ageScore));
      Object sbpScore = list.get(1);
      pigeonResult.setSbpScore((sbpScore == null) ? null : ((sbpScore instanceof Integer) ? (Integer) sbpScore : (Long) sbpScore));
      Object smokingScore = list.get(2);
      pigeonResult.setSmokingScore((smokingScore == null) ? null : ((smokingScore instanceof Integer) ? (Integer) smokingScore : (Long) smokingScore));
      Object diabetesScore = list.get(3);
      pigeonResult.setDiabetesScore((diabetesScore == null) ? null : ((diabetesScore instanceof Integer) ? (Integer) diabetesScore : (Long) diabetesScore));
      Object bmiScore = list.get(4);
      pigeonResult.setBmiScore((bmiScore == null) ? null : ((bmiScore instanceof Integer) ? (Integer) bmiScore : (Long) bmiScore));
      Object cholesterolScore = list.get(5);
      pigeonResult.setCholesterolScore((cholesterolScore == null) ? null : ((cholesterolScore instanceof Integer) ? (Integer) cholesterolScore : (Long) cholesterolScore));
      Object cholesterolHdlScore = list.get(6);
      pigeonResult.setCholesterolHdlScore((cholesterolHdlScore == null) ? null : ((cholesterolHdlScore instanceof Integer) ? (Integer) cholesterolHdlScore : (Long) cholesterolHdlScore));
      Object totalScore = list.get(7);
      pigeonResult.setTotalScore((totalScore == null) ? null : ((totalScore instanceof Integer) ? (Integer) totalScore : (Long) totalScore));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class HealthRisks {
    private @NonNull HardAndFatalEventsRisks hardAndFatalEvents;

    public @NonNull HardAndFatalEventsRisks getHardAndFatalEvents() {
      return hardAndFatalEvents;
    }

    public void setHardAndFatalEvents(@NonNull HardAndFatalEventsRisks setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"hardAndFatalEvents\" is null.");
      }
      this.hardAndFatalEvents = setterArg;
    }

    private @NonNull CVDiseasesRisks cvDiseases;

    public @NonNull CVDiseasesRisks getCvDiseases() {
      return cvDiseases;
    }

    public void setCvDiseases(@NonNull CVDiseasesRisks setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"cvDiseases\" is null.");
      }
      this.cvDiseases = setterArg;
    }

    private @Nullable Long vascularAge;

    public @Nullable Long getVascularAge() {
      return vascularAge;
    }

    public void setVascularAge(@Nullable Long setterArg) {
      this.vascularAge = setterArg;
    }

    private @NonNull RisksFactorsScores scores;

    public @NonNull RisksFactorsScores getScores() {
      return scores;
    }

    public void setScores(@NonNull RisksFactorsScores setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"scores\" is null.");
      }
      this.scores = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    HealthRisks() {}

    public static final class Builder {

      private @Nullable HardAndFatalEventsRisks hardAndFatalEvents;

      public @NonNull Builder setHardAndFatalEvents(@NonNull HardAndFatalEventsRisks setterArg) {
        this.hardAndFatalEvents = setterArg;
        return this;
      }

      private @Nullable CVDiseasesRisks cvDiseases;

      public @NonNull Builder setCvDiseases(@NonNull CVDiseasesRisks setterArg) {
        this.cvDiseases = setterArg;
        return this;
      }

      private @Nullable Long vascularAge;

      public @NonNull Builder setVascularAge(@Nullable Long setterArg) {
        this.vascularAge = setterArg;
        return this;
      }

      private @Nullable RisksFactorsScores scores;

      public @NonNull Builder setScores(@NonNull RisksFactorsScores setterArg) {
        this.scores = setterArg;
        return this;
      }

      public @NonNull HealthRisks build() {
        HealthRisks pigeonReturn = new HealthRisks();
        pigeonReturn.setHardAndFatalEvents(hardAndFatalEvents);
        pigeonReturn.setCvDiseases(cvDiseases);
        pigeonReturn.setVascularAge(vascularAge);
        pigeonReturn.setScores(scores);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add((hardAndFatalEvents == null) ? null : hardAndFatalEvents.toList());
      toListResult.add((cvDiseases == null) ? null : cvDiseases.toList());
      toListResult.add(vascularAge);
      toListResult.add((scores == null) ? null : scores.toList());
      return toListResult;
    }

    static @NonNull HealthRisks fromList(@NonNull ArrayList<Object> list) {
      HealthRisks pigeonResult = new HealthRisks();
      Object hardAndFatalEvents = list.get(0);
      pigeonResult.setHardAndFatalEvents((hardAndFatalEvents == null) ? null : HardAndFatalEventsRisks.fromList((ArrayList<Object>) hardAndFatalEvents));
      Object cvDiseases = list.get(1);
      pigeonResult.setCvDiseases((cvDiseases == null) ? null : CVDiseasesRisks.fromList((ArrayList<Object>) cvDiseases));
      Object vascularAge = list.get(2);
      pigeonResult.setVascularAge((vascularAge == null) ? null : ((vascularAge instanceof Integer) ? (Integer) vascularAge : (Long) vascularAge));
      Object scores = list.get(3);
      pigeonResult.setScores((scores == null) ? null : RisksFactorsScores.fromList((ArrayList<Object>) scores));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class ShenaiSdkNativeApiCodec extends StandardMessageCodec {
    public static final ShenaiSdkNativeApiCodec INSTANCE = new ShenaiSdkNativeApiCodec();

    private ShenaiSdkNativeApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return CVDiseasesRisks.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return CameraModeResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return CustomColorTheme.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return CustomMeasurementConfig.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return FaceStateResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return HardAndFatalEventsRisks.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return HealthRisks.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return Heartbeat.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return InitializationSettings.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 137:
          return InitializeResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 138:
          return MeasurementPresetResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 139:
          return MeasurementResults.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 140:
          return MeasurementStateResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 141:
          return NormalizedFaceBbox.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 142:
          return OperatingModeResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 143:
          return PrecisionModeResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 144:
          return RisksFactors.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 145:
          return RisksFactorsScores.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof CVDiseasesRisks) {
        stream.write(128);
        writeValue(stream, ((CVDiseasesRisks) value).toList());
      } else if (value instanceof CameraModeResponse) {
        stream.write(129);
        writeValue(stream, ((CameraModeResponse) value).toList());
      } else if (value instanceof CustomColorTheme) {
        stream.write(130);
        writeValue(stream, ((CustomColorTheme) value).toList());
      } else if (value instanceof CustomMeasurementConfig) {
        stream.write(131);
        writeValue(stream, ((CustomMeasurementConfig) value).toList());
      } else if (value instanceof FaceStateResponse) {
        stream.write(132);
        writeValue(stream, ((FaceStateResponse) value).toList());
      } else if (value instanceof HardAndFatalEventsRisks) {
        stream.write(133);
        writeValue(stream, ((HardAndFatalEventsRisks) value).toList());
      } else if (value instanceof HealthRisks) {
        stream.write(134);
        writeValue(stream, ((HealthRisks) value).toList());
      } else if (value instanceof Heartbeat) {
        stream.write(135);
        writeValue(stream, ((Heartbeat) value).toList());
      } else if (value instanceof InitializationSettings) {
        stream.write(136);
        writeValue(stream, ((InitializationSettings) value).toList());
      } else if (value instanceof InitializeResponse) {
        stream.write(137);
        writeValue(stream, ((InitializeResponse) value).toList());
      } else if (value instanceof MeasurementPresetResponse) {
        stream.write(138);
        writeValue(stream, ((MeasurementPresetResponse) value).toList());
      } else if (value instanceof MeasurementResults) {
        stream.write(139);
        writeValue(stream, ((MeasurementResults) value).toList());
      } else if (value instanceof MeasurementStateResponse) {
        stream.write(140);
        writeValue(stream, ((MeasurementStateResponse) value).toList());
      } else if (value instanceof NormalizedFaceBbox) {
        stream.write(141);
        writeValue(stream, ((NormalizedFaceBbox) value).toList());
      } else if (value instanceof OperatingModeResponse) {
        stream.write(142);
        writeValue(stream, ((OperatingModeResponse) value).toList());
      } else if (value instanceof PrecisionModeResponse) {
        stream.write(143);
        writeValue(stream, ((PrecisionModeResponse) value).toList());
      } else if (value instanceof RisksFactors) {
        stream.write(144);
        writeValue(stream, ((RisksFactors) value).toList());
      } else if (value instanceof RisksFactorsScores) {
        stream.write(145);
        writeValue(stream, ((RisksFactorsScores) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface ShenaiSdkNativeApi {

    @NonNull 
    InitializeResponse initialize(@NonNull String apiKey, @NonNull String userId, @Nullable InitializationSettings settings);

    @NonNull 
    Boolean isInitialized();

    void deinitialize(@NonNull Result<Void> result);

    void setOperatingMode(@NonNull OperatingMode mode);

    @NonNull 
    OperatingModeResponse getOperatingMode();

    void setPrecisionMode(@NonNull PrecisionMode mode);

    @NonNull 
    PrecisionModeResponse getPrecisionMode();

    void setMeasurementPreset(@NonNull MeasurementPreset preset);

    @NonNull 
    MeasurementPresetResponse getMeasurementPreset();

    void setCustomMeasurementConfig(@NonNull CustomMeasurementConfig config);

    void setCustomColorTheme(@NonNull CustomColorTheme theme);

    void setCameraMode(@NonNull CameraMode mode);

    @NonNull 
    CameraModeResponse getCameraMode();

    void setShowUserInterface(@NonNull Boolean show);

    @NonNull 
    Boolean getShowUserInterface();

    void setShowFacePositioningOverlay(@NonNull Boolean show);

    @NonNull 
    Boolean getShowFacePositioningOverlay();

    void setShowVisualWarnings(@NonNull Boolean show);

    @NonNull 
    Boolean getShowVisualWarnings();

    void setEnableCameraSwap(@NonNull Boolean enable);

    @NonNull 
    Boolean getEnableCameraSwap();

    void setShowFaceMask(@NonNull Boolean show);

    @NonNull 
    Boolean getShowFaceMask();

    void setShowBloodFlow(@NonNull Boolean show);

    @NonNull 
    Boolean getShowBloodFlow();

    void setEnableStartAfterSuccess(@NonNull Boolean enable);

    @NonNull 
    Boolean getEnableStartAfterSuccess();

    @NonNull 
    FaceStateResponse getFaceState();

    @Nullable 
    NormalizedFaceBbox getNormalizedFaceBbox();

    @NonNull 
    MeasurementStateResponse getMeasurementState();

    @NonNull 
    Double getMeasurementProgressPercentage();

    @Nullable 
    Long getHeartRate10s();

    @Nullable 
    Long getHeartRate4s();

    @Nullable 
    MeasurementResults getRealtimeMetrics(@NonNull Double period_sec);

    @Nullable 
    MeasurementResults getMeasurementResults();

    void setRecordingEnabled(@NonNull Boolean enabled);

    @NonNull 
    Boolean getRecordingEnabled();

    @NonNull 
    Double getTotalBadSignalSeconds();

    @NonNull 
    Double getCurrentSignalQualityMetric();

    @Nullable 
    byte[] getSignalQualityMapPng();

    @Nullable 
    byte[] getFaceTexturePng();

    @Nullable 
    double[] getFullPpgSignal();

    @NonNull 
    String getTraceID();

    void setLanguage(@NonNull String language);

    @NonNull 
    HealthRisks computeHealthRisks(@NonNull RisksFactors healthRisksFactors);

    @NonNull 
    HealthRisks getMinimalHealthRisks(@NonNull RisksFactors healthRisksFactors);

    @NonNull 
    HealthRisks getMaximalHealthRisks(@NonNull RisksFactors healthRisksFactors);

    /** The codec used by ShenaiSdkNativeApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return ShenaiSdkNativeApiCodec.INSTANCE;
    }
    /**Sets up an instance of `ShenaiSdkNativeApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable ShenaiSdkNativeApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String apiKeyArg = (String) args.get(0);
                String userIdArg = (String) args.get(1);
                InitializationSettings settingsArg = (InitializationSettings) args.get(2);
                try {
                  InitializeResponse output = api.initialize(apiKeyArg, userIdArg, settingsArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.isInitialized", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.isInitialized();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.deinitialize", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.deinitialize(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setOperatingMode", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                OperatingMode modeArg = OperatingMode.values()[(int) args.get(0)];
                try {
                  api.setOperatingMode(modeArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getOperatingMode", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  OperatingModeResponse output = api.getOperatingMode();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setPrecisionMode", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PrecisionMode modeArg = PrecisionMode.values()[(int) args.get(0)];
                try {
                  api.setPrecisionMode(modeArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getPrecisionMode", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  PrecisionModeResponse output = api.getPrecisionMode();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setMeasurementPreset", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                MeasurementPreset presetArg = MeasurementPreset.values()[(int) args.get(0)];
                try {
                  api.setMeasurementPreset(presetArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getMeasurementPreset", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  MeasurementPresetResponse output = api.getMeasurementPreset();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setCustomMeasurementConfig", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                CustomMeasurementConfig configArg = (CustomMeasurementConfig) args.get(0);
                try {
                  api.setCustomMeasurementConfig(configArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setCustomColorTheme", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                CustomColorTheme themeArg = (CustomColorTheme) args.get(0);
                try {
                  api.setCustomColorTheme(themeArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setCameraMode", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                CameraMode modeArg = CameraMode.values()[(int) args.get(0)];
                try {
                  api.setCameraMode(modeArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getCameraMode", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  CameraModeResponse output = api.getCameraMode();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setShowUserInterface", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean showArg = (Boolean) args.get(0);
                try {
                  api.setShowUserInterface(showArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getShowUserInterface", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.getShowUserInterface();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setShowFacePositioningOverlay", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean showArg = (Boolean) args.get(0);
                try {
                  api.setShowFacePositioningOverlay(showArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getShowFacePositioningOverlay", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.getShowFacePositioningOverlay();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setShowVisualWarnings", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean showArg = (Boolean) args.get(0);
                try {
                  api.setShowVisualWarnings(showArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getShowVisualWarnings", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.getShowVisualWarnings();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setEnableCameraSwap", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean enableArg = (Boolean) args.get(0);
                try {
                  api.setEnableCameraSwap(enableArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getEnableCameraSwap", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.getEnableCameraSwap();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setShowFaceMask", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean showArg = (Boolean) args.get(0);
                try {
                  api.setShowFaceMask(showArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getShowFaceMask", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.getShowFaceMask();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setShowBloodFlow", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean showArg = (Boolean) args.get(0);
                try {
                  api.setShowBloodFlow(showArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getShowBloodFlow", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.getShowBloodFlow();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setEnableStartAfterSuccess", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean enableArg = (Boolean) args.get(0);
                try {
                  api.setEnableStartAfterSuccess(enableArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getEnableStartAfterSuccess", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.getEnableStartAfterSuccess();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getFaceState", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  FaceStateResponse output = api.getFaceState();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getNormalizedFaceBbox", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  NormalizedFaceBbox output = api.getNormalizedFaceBbox();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getMeasurementState", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  MeasurementStateResponse output = api.getMeasurementState();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getMeasurementProgressPercentage", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Double output = api.getMeasurementProgressPercentage();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getHeartRate10s", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Long output = api.getHeartRate10s();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getHeartRate4s", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Long output = api.getHeartRate4s();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getRealtimeMetrics", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Double period_secArg = (Double) args.get(0);
                try {
                  MeasurementResults output = api.getRealtimeMetrics(period_secArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getMeasurementResults", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  MeasurementResults output = api.getMeasurementResults();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setRecordingEnabled", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean enabledArg = (Boolean) args.get(0);
                try {
                  api.setRecordingEnabled(enabledArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getRecordingEnabled", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.getRecordingEnabled();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getTotalBadSignalSeconds", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Double output = api.getTotalBadSignalSeconds();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getCurrentSignalQualityMetric", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Double output = api.getCurrentSignalQualityMetric();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getSignalQualityMapPng", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  byte[] output = api.getSignalQualityMapPng();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getFaceTexturePng", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  byte[] output = api.getFaceTexturePng();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getFullPpgSignal", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  double[] output = api.getFullPpgSignal();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getTraceID", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  String output = api.getTraceID();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setLanguage", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String languageArg = (String) args.get(0);
                try {
                  api.setLanguage(languageArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.computeHealthRisks", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                RisksFactors healthRisksFactorsArg = (RisksFactors) args.get(0);
                try {
                  HealthRisks output = api.computeHealthRisks(healthRisksFactorsArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getMinimalHealthRisks", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                RisksFactors healthRisksFactorsArg = (RisksFactors) args.get(0);
                try {
                  HealthRisks output = api.getMinimalHealthRisks(healthRisksFactorsArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getMaximalHealthRisks", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                RisksFactors healthRisksFactorsArg = (RisksFactors) args.get(0);
                try {
                  HealthRisks output = api.getMaximalHealthRisks(healthRisksFactorsArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
