// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "pigeon.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

@implementation InitializationResultBox
- (instancetype)initWithValue:(InitializationResult)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation OperatingModeBox
- (instancetype)initWithValue:(OperatingMode)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation PrecisionModeBox
- (instancetype)initWithValue:(PrecisionMode)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation MeasurementPresetBox
- (instancetype)initWithValue:(MeasurementPreset)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation CameraModeBox
- (instancetype)initWithValue:(CameraMode)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation OnboardingModeBox
- (instancetype)initWithValue:(OnboardingMode)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation FaceStateBox
- (instancetype)initWithValue:(FaceState)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation MeasurementStateBox
- (instancetype)initWithValue:(MeasurementState)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation GenderBox
- (instancetype)initWithValue:(Gender)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation RaceBox
- (instancetype)initWithValue:(Race)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface InitializeResponse ()
+ (InitializeResponse *)fromList:(NSArray *)list;
+ (nullable InitializeResponse *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface OperatingModeResponse ()
+ (OperatingModeResponse *)fromList:(NSArray *)list;
+ (nullable OperatingModeResponse *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PrecisionModeResponse ()
+ (PrecisionModeResponse *)fromList:(NSArray *)list;
+ (nullable PrecisionModeResponse *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface MeasurementPresetResponse ()
+ (MeasurementPresetResponse *)fromList:(NSArray *)list;
+ (nullable MeasurementPresetResponse *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface CameraModeResponse ()
+ (CameraModeResponse *)fromList:(NSArray *)list;
+ (nullable CameraModeResponse *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FaceStateResponse ()
+ (FaceStateResponse *)fromList:(NSArray *)list;
+ (nullable FaceStateResponse *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface NormalizedFaceBbox ()
+ (NormalizedFaceBbox *)fromList:(NSArray *)list;
+ (nullable NormalizedFaceBbox *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface MeasurementStateResponse ()
+ (MeasurementStateResponse *)fromList:(NSArray *)list;
+ (nullable MeasurementStateResponse *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface Heartbeat ()
+ (Heartbeat *)fromList:(NSArray *)list;
+ (nullable Heartbeat *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface MeasurementResults ()
+ (MeasurementResults *)fromList:(NSArray *)list;
+ (nullable MeasurementResults *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface InitializationSettings ()
+ (InitializationSettings *)fromList:(NSArray *)list;
+ (nullable InitializationSettings *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface CustomMeasurementConfig ()
+ (CustomMeasurementConfig *)fromList:(NSArray *)list;
+ (nullable CustomMeasurementConfig *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface CustomColorTheme ()
+ (CustomColorTheme *)fromList:(NSArray *)list;
+ (nullable CustomColorTheme *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface RisksFactors ()
+ (RisksFactors *)fromList:(NSArray *)list;
+ (nullable RisksFactors *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface HardAndFatalEventsRisks ()
+ (HardAndFatalEventsRisks *)fromList:(NSArray *)list;
+ (nullable HardAndFatalEventsRisks *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface CVDiseasesRisks ()
+ (CVDiseasesRisks *)fromList:(NSArray *)list;
+ (nullable CVDiseasesRisks *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface RisksFactorsScores ()
+ (RisksFactorsScores *)fromList:(NSArray *)list;
+ (nullable RisksFactorsScores *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface HealthRisks ()
+ (HealthRisks *)fromList:(NSArray *)list;
+ (nullable HealthRisks *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation InitializeResponse
+ (instancetype)makeWithResult:(InitializationResult)result {
  InitializeResponse* pigeonResult = [[InitializeResponse alloc] init];
  pigeonResult.result = result;
  return pigeonResult;
}
+ (InitializeResponse *)fromList:(NSArray *)list {
  InitializeResponse *pigeonResult = [[InitializeResponse alloc] init];
  pigeonResult.result = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable InitializeResponse *)nullableFromList:(NSArray *)list {
  return (list) ? [InitializeResponse fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.result),
  ];
}
@end

@implementation OperatingModeResponse
+ (instancetype)makeWithMode:(OperatingMode)mode {
  OperatingModeResponse* pigeonResult = [[OperatingModeResponse alloc] init];
  pigeonResult.mode = mode;
  return pigeonResult;
}
+ (OperatingModeResponse *)fromList:(NSArray *)list {
  OperatingModeResponse *pigeonResult = [[OperatingModeResponse alloc] init];
  pigeonResult.mode = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable OperatingModeResponse *)nullableFromList:(NSArray *)list {
  return (list) ? [OperatingModeResponse fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.mode),
  ];
}
@end

@implementation PrecisionModeResponse
+ (instancetype)makeWithMode:(PrecisionMode)mode {
  PrecisionModeResponse* pigeonResult = [[PrecisionModeResponse alloc] init];
  pigeonResult.mode = mode;
  return pigeonResult;
}
+ (PrecisionModeResponse *)fromList:(NSArray *)list {
  PrecisionModeResponse *pigeonResult = [[PrecisionModeResponse alloc] init];
  pigeonResult.mode = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable PrecisionModeResponse *)nullableFromList:(NSArray *)list {
  return (list) ? [PrecisionModeResponse fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.mode),
  ];
}
@end

@implementation MeasurementPresetResponse
+ (instancetype)makeWithPreset:(MeasurementPreset)preset {
  MeasurementPresetResponse* pigeonResult = [[MeasurementPresetResponse alloc] init];
  pigeonResult.preset = preset;
  return pigeonResult;
}
+ (MeasurementPresetResponse *)fromList:(NSArray *)list {
  MeasurementPresetResponse *pigeonResult = [[MeasurementPresetResponse alloc] init];
  pigeonResult.preset = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable MeasurementPresetResponse *)nullableFromList:(NSArray *)list {
  return (list) ? [MeasurementPresetResponse fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.preset),
  ];
}
@end

@implementation CameraModeResponse
+ (instancetype)makeWithMode:(CameraMode)mode {
  CameraModeResponse* pigeonResult = [[CameraModeResponse alloc] init];
  pigeonResult.mode = mode;
  return pigeonResult;
}
+ (CameraModeResponse *)fromList:(NSArray *)list {
  CameraModeResponse *pigeonResult = [[CameraModeResponse alloc] init];
  pigeonResult.mode = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable CameraModeResponse *)nullableFromList:(NSArray *)list {
  return (list) ? [CameraModeResponse fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.mode),
  ];
}
@end

@implementation FaceStateResponse
+ (instancetype)makeWithState:(FaceState)state {
  FaceStateResponse* pigeonResult = [[FaceStateResponse alloc] init];
  pigeonResult.state = state;
  return pigeonResult;
}
+ (FaceStateResponse *)fromList:(NSArray *)list {
  FaceStateResponse *pigeonResult = [[FaceStateResponse alloc] init];
  pigeonResult.state = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable FaceStateResponse *)nullableFromList:(NSArray *)list {
  return (list) ? [FaceStateResponse fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.state),
  ];
}
@end

@implementation NormalizedFaceBbox
+ (instancetype)makeWithX:(NSNumber *)x
    y:(NSNumber *)y
    width:(NSNumber *)width
    height:(NSNumber *)height {
  NormalizedFaceBbox* pigeonResult = [[NormalizedFaceBbox alloc] init];
  pigeonResult.x = x;
  pigeonResult.y = y;
  pigeonResult.width = width;
  pigeonResult.height = height;
  return pigeonResult;
}
+ (NormalizedFaceBbox *)fromList:(NSArray *)list {
  NormalizedFaceBbox *pigeonResult = [[NormalizedFaceBbox alloc] init];
  pigeonResult.x = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.x != nil, @"");
  pigeonResult.y = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.y != nil, @"");
  pigeonResult.width = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.width != nil, @"");
  pigeonResult.height = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.height != nil, @"");
  return pigeonResult;
}
+ (nullable NormalizedFaceBbox *)nullableFromList:(NSArray *)list {
  return (list) ? [NormalizedFaceBbox fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.x ?: [NSNull null]),
    (self.y ?: [NSNull null]),
    (self.width ?: [NSNull null]),
    (self.height ?: [NSNull null]),
  ];
}
@end

@implementation MeasurementStateResponse
+ (instancetype)makeWithState:(MeasurementState)state {
  MeasurementStateResponse* pigeonResult = [[MeasurementStateResponse alloc] init];
  pigeonResult.state = state;
  return pigeonResult;
}
+ (MeasurementStateResponse *)fromList:(NSArray *)list {
  MeasurementStateResponse *pigeonResult = [[MeasurementStateResponse alloc] init];
  pigeonResult.state = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable MeasurementStateResponse *)nullableFromList:(NSArray *)list {
  return (list) ? [MeasurementStateResponse fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.state),
  ];
}
@end

@implementation Heartbeat
+ (instancetype)makeWithStart_location_sec:(NSNumber *)start_location_sec
    end_location_sec:(NSNumber *)end_location_sec
    duration_ms:(NSNumber *)duration_ms {
  Heartbeat* pigeonResult = [[Heartbeat alloc] init];
  pigeonResult.start_location_sec = start_location_sec;
  pigeonResult.end_location_sec = end_location_sec;
  pigeonResult.duration_ms = duration_ms;
  return pigeonResult;
}
+ (Heartbeat *)fromList:(NSArray *)list {
  Heartbeat *pigeonResult = [[Heartbeat alloc] init];
  pigeonResult.start_location_sec = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.start_location_sec != nil, @"");
  pigeonResult.end_location_sec = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.end_location_sec != nil, @"");
  pigeonResult.duration_ms = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.duration_ms != nil, @"");
  return pigeonResult;
}
+ (nullable Heartbeat *)nullableFromList:(NSArray *)list {
  return (list) ? [Heartbeat fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.start_location_sec ?: [NSNull null]),
    (self.end_location_sec ?: [NSNull null]),
    (self.duration_ms ?: [NSNull null]),
  ];
}
@end

@implementation MeasurementResults
+ (instancetype)makeWithHeart_rate_bpm:(NSNumber *)heart_rate_bpm
    hrv_sdnn_ms:(nullable NSNumber *)hrv_sdnn_ms
    hrv_lnrmssd_ms:(nullable NSNumber *)hrv_lnrmssd_ms
    stress_index:(nullable NSNumber *)stress_index
    breathing_rate_bpm:(nullable NSNumber *)breathing_rate_bpm
    systolic_blood_pressure_mmhg:(nullable NSNumber *)systolic_blood_pressure_mmhg
    diastolic_blood_pressure_mmhg:(nullable NSNumber *)diastolic_blood_pressure_mmhg
    heartbeats:(NSArray<Heartbeat *> *)heartbeats
    average_signal_quality:(NSNumber *)average_signal_quality {
  MeasurementResults* pigeonResult = [[MeasurementResults alloc] init];
  pigeonResult.heart_rate_bpm = heart_rate_bpm;
  pigeonResult.hrv_sdnn_ms = hrv_sdnn_ms;
  pigeonResult.hrv_lnrmssd_ms = hrv_lnrmssd_ms;
  pigeonResult.stress_index = stress_index;
  pigeonResult.breathing_rate_bpm = breathing_rate_bpm;
  pigeonResult.systolic_blood_pressure_mmhg = systolic_blood_pressure_mmhg;
  pigeonResult.diastolic_blood_pressure_mmhg = diastolic_blood_pressure_mmhg;
  pigeonResult.heartbeats = heartbeats;
  pigeonResult.average_signal_quality = average_signal_quality;
  return pigeonResult;
}
+ (MeasurementResults *)fromList:(NSArray *)list {
  MeasurementResults *pigeonResult = [[MeasurementResults alloc] init];
  pigeonResult.heart_rate_bpm = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.heart_rate_bpm != nil, @"");
  pigeonResult.hrv_sdnn_ms = GetNullableObjectAtIndex(list, 1);
  pigeonResult.hrv_lnrmssd_ms = GetNullableObjectAtIndex(list, 2);
  pigeonResult.stress_index = GetNullableObjectAtIndex(list, 3);
  pigeonResult.breathing_rate_bpm = GetNullableObjectAtIndex(list, 4);
  pigeonResult.systolic_blood_pressure_mmhg = GetNullableObjectAtIndex(list, 5);
  pigeonResult.diastolic_blood_pressure_mmhg = GetNullableObjectAtIndex(list, 6);
  pigeonResult.heartbeats = GetNullableObjectAtIndex(list, 7);
  NSAssert(pigeonResult.heartbeats != nil, @"");
  pigeonResult.average_signal_quality = GetNullableObjectAtIndex(list, 8);
  NSAssert(pigeonResult.average_signal_quality != nil, @"");
  return pigeonResult;
}
+ (nullable MeasurementResults *)nullableFromList:(NSArray *)list {
  return (list) ? [MeasurementResults fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.heart_rate_bpm ?: [NSNull null]),
    (self.hrv_sdnn_ms ?: [NSNull null]),
    (self.hrv_lnrmssd_ms ?: [NSNull null]),
    (self.stress_index ?: [NSNull null]),
    (self.breathing_rate_bpm ?: [NSNull null]),
    (self.systolic_blood_pressure_mmhg ?: [NSNull null]),
    (self.diastolic_blood_pressure_mmhg ?: [NSNull null]),
    (self.heartbeats ?: [NSNull null]),
    (self.average_signal_quality ?: [NSNull null]),
  ];
}
@end

@implementation InitializationSettings
+ (instancetype)makeWithPrecisionMode:(nullable PrecisionModeBox *)precisionMode
    operatingMode:(nullable OperatingModeBox *)operatingMode
    measurementPreset:(nullable MeasurementPresetBox *)measurementPreset
    cameraMode:(nullable CameraModeBox *)cameraMode
    onboardingMode:(nullable OnboardingModeBox *)onboardingMode
    showUserInterface:(nullable NSNumber *)showUserInterface
    showFacePositioningOverlay:(nullable NSNumber *)showFacePositioningOverlay
    showVisualWarnings:(nullable NSNumber *)showVisualWarnings
    enableCameraSwap:(nullable NSNumber *)enableCameraSwap
    showFaceMask:(nullable NSNumber *)showFaceMask
    showBloodFlow:(nullable NSNumber *)showBloodFlow
    proVersionLock:(nullable NSNumber *)proVersionLock
    hideShenaiLogo:(nullable NSNumber *)hideShenaiLogo {
  InitializationSettings* pigeonResult = [[InitializationSettings alloc] init];
  pigeonResult.precisionMode = precisionMode;
  pigeonResult.operatingMode = operatingMode;
  pigeonResult.measurementPreset = measurementPreset;
  pigeonResult.cameraMode = cameraMode;
  pigeonResult.onboardingMode = onboardingMode;
  pigeonResult.showUserInterface = showUserInterface;
  pigeonResult.showFacePositioningOverlay = showFacePositioningOverlay;
  pigeonResult.showVisualWarnings = showVisualWarnings;
  pigeonResult.enableCameraSwap = enableCameraSwap;
  pigeonResult.showFaceMask = showFaceMask;
  pigeonResult.showBloodFlow = showBloodFlow;
  pigeonResult.proVersionLock = proVersionLock;
  pigeonResult.hideShenaiLogo = hideShenaiLogo;
  return pigeonResult;
}
+ (InitializationSettings *)fromList:(NSArray *)list {
  InitializationSettings *pigeonResult = [[InitializationSettings alloc] init];
  NSNumber *precisionModeAsNumber = GetNullableObjectAtIndex(list, 0);
  PrecisionModeBox *precisionMode = precisionModeAsNumber == nil ? nil : [[PrecisionModeBox alloc] initWithValue: [precisionModeAsNumber integerValue]];
  pigeonResult.precisionMode = precisionMode;
  NSNumber *operatingModeAsNumber = GetNullableObjectAtIndex(list, 1);
  OperatingModeBox *operatingMode = operatingModeAsNumber == nil ? nil : [[OperatingModeBox alloc] initWithValue: [operatingModeAsNumber integerValue]];
  pigeonResult.operatingMode = operatingMode;
  NSNumber *measurementPresetAsNumber = GetNullableObjectAtIndex(list, 2);
  MeasurementPresetBox *measurementPreset = measurementPresetAsNumber == nil ? nil : [[MeasurementPresetBox alloc] initWithValue: [measurementPresetAsNumber integerValue]];
  pigeonResult.measurementPreset = measurementPreset;
  NSNumber *cameraModeAsNumber = GetNullableObjectAtIndex(list, 3);
  CameraModeBox *cameraMode = cameraModeAsNumber == nil ? nil : [[CameraModeBox alloc] initWithValue: [cameraModeAsNumber integerValue]];
  pigeonResult.cameraMode = cameraMode;
  NSNumber *onboardingModeAsNumber = GetNullableObjectAtIndex(list, 4);
  OnboardingModeBox *onboardingMode = onboardingModeAsNumber == nil ? nil : [[OnboardingModeBox alloc] initWithValue: [onboardingModeAsNumber integerValue]];
  pigeonResult.onboardingMode = onboardingMode;
  pigeonResult.showUserInterface = GetNullableObjectAtIndex(list, 5);
  pigeonResult.showFacePositioningOverlay = GetNullableObjectAtIndex(list, 6);
  pigeonResult.showVisualWarnings = GetNullableObjectAtIndex(list, 7);
  pigeonResult.enableCameraSwap = GetNullableObjectAtIndex(list, 8);
  pigeonResult.showFaceMask = GetNullableObjectAtIndex(list, 9);
  pigeonResult.showBloodFlow = GetNullableObjectAtIndex(list, 10);
  pigeonResult.proVersionLock = GetNullableObjectAtIndex(list, 11);
  pigeonResult.hideShenaiLogo = GetNullableObjectAtIndex(list, 12);
  return pigeonResult;
}
+ (nullable InitializationSettings *)nullableFromList:(NSArray *)list {
  return (list) ? [InitializationSettings fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.precisionMode == nil ? [NSNull null] : [NSNumber numberWithInteger:self.precisionMode.value]),
    (self.operatingMode == nil ? [NSNull null] : [NSNumber numberWithInteger:self.operatingMode.value]),
    (self.measurementPreset == nil ? [NSNull null] : [NSNumber numberWithInteger:self.measurementPreset.value]),
    (self.cameraMode == nil ? [NSNull null] : [NSNumber numberWithInteger:self.cameraMode.value]),
    (self.onboardingMode == nil ? [NSNull null] : [NSNumber numberWithInteger:self.onboardingMode.value]),
    (self.showUserInterface ?: [NSNull null]),
    (self.showFacePositioningOverlay ?: [NSNull null]),
    (self.showVisualWarnings ?: [NSNull null]),
    (self.enableCameraSwap ?: [NSNull null]),
    (self.showFaceMask ?: [NSNull null]),
    (self.showBloodFlow ?: [NSNull null]),
    (self.proVersionLock ?: [NSNull null]),
    (self.hideShenaiLogo ?: [NSNull null]),
  ];
}
@end

@implementation CustomMeasurementConfig
+ (instancetype)makeWithDurationSeconds:(nullable NSNumber *)durationSeconds
    infiniteMeasurement:(nullable NSNumber *)infiniteMeasurement
    showHeartRate:(nullable NSNumber *)showHeartRate
    showHrvSdnn:(nullable NSNumber *)showHrvSdnn
    showBreathingRate:(nullable NSNumber *)showBreathingRate
    showSystolicBloodPressure:(nullable NSNumber *)showSystolicBloodPressure
    showDiastolicBloodPressure:(nullable NSNumber *)showDiastolicBloodPressure
    showCardiacStress:(nullable NSNumber *)showCardiacStress
    realtimeHrPeriodSeconds:(nullable NSNumber *)realtimeHrPeriodSeconds
    realtimeHrvPeriodSeconds:(nullable NSNumber *)realtimeHrvPeriodSeconds
    realtimeCardiacStressPeriodSeconds:(nullable NSNumber *)realtimeCardiacStressPeriodSeconds {
  CustomMeasurementConfig* pigeonResult = [[CustomMeasurementConfig alloc] init];
  pigeonResult.durationSeconds = durationSeconds;
  pigeonResult.infiniteMeasurement = infiniteMeasurement;
  pigeonResult.showHeartRate = showHeartRate;
  pigeonResult.showHrvSdnn = showHrvSdnn;
  pigeonResult.showBreathingRate = showBreathingRate;
  pigeonResult.showSystolicBloodPressure = showSystolicBloodPressure;
  pigeonResult.showDiastolicBloodPressure = showDiastolicBloodPressure;
  pigeonResult.showCardiacStress = showCardiacStress;
  pigeonResult.realtimeHrPeriodSeconds = realtimeHrPeriodSeconds;
  pigeonResult.realtimeHrvPeriodSeconds = realtimeHrvPeriodSeconds;
  pigeonResult.realtimeCardiacStressPeriodSeconds = realtimeCardiacStressPeriodSeconds;
  return pigeonResult;
}
+ (CustomMeasurementConfig *)fromList:(NSArray *)list {
  CustomMeasurementConfig *pigeonResult = [[CustomMeasurementConfig alloc] init];
  pigeonResult.durationSeconds = GetNullableObjectAtIndex(list, 0);
  pigeonResult.infiniteMeasurement = GetNullableObjectAtIndex(list, 1);
  pigeonResult.showHeartRate = GetNullableObjectAtIndex(list, 2);
  pigeonResult.showHrvSdnn = GetNullableObjectAtIndex(list, 3);
  pigeonResult.showBreathingRate = GetNullableObjectAtIndex(list, 4);
  pigeonResult.showSystolicBloodPressure = GetNullableObjectAtIndex(list, 5);
  pigeonResult.showDiastolicBloodPressure = GetNullableObjectAtIndex(list, 6);
  pigeonResult.showCardiacStress = GetNullableObjectAtIndex(list, 7);
  pigeonResult.realtimeHrPeriodSeconds = GetNullableObjectAtIndex(list, 8);
  pigeonResult.realtimeHrvPeriodSeconds = GetNullableObjectAtIndex(list, 9);
  pigeonResult.realtimeCardiacStressPeriodSeconds = GetNullableObjectAtIndex(list, 10);
  return pigeonResult;
}
+ (nullable CustomMeasurementConfig *)nullableFromList:(NSArray *)list {
  return (list) ? [CustomMeasurementConfig fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.durationSeconds ?: [NSNull null]),
    (self.infiniteMeasurement ?: [NSNull null]),
    (self.showHeartRate ?: [NSNull null]),
    (self.showHrvSdnn ?: [NSNull null]),
    (self.showBreathingRate ?: [NSNull null]),
    (self.showSystolicBloodPressure ?: [NSNull null]),
    (self.showDiastolicBloodPressure ?: [NSNull null]),
    (self.showCardiacStress ?: [NSNull null]),
    (self.realtimeHrPeriodSeconds ?: [NSNull null]),
    (self.realtimeHrvPeriodSeconds ?: [NSNull null]),
    (self.realtimeCardiacStressPeriodSeconds ?: [NSNull null]),
  ];
}
@end

@implementation CustomColorTheme
+ (instancetype)makeWithThemeColor:(nullable NSString *)themeColor
    textColor:(nullable NSString *)textColor
    backgroundColor:(nullable NSString *)backgroundColor
    tileColor:(nullable NSString *)tileColor {
  CustomColorTheme* pigeonResult = [[CustomColorTheme alloc] init];
  pigeonResult.themeColor = themeColor;
  pigeonResult.textColor = textColor;
  pigeonResult.backgroundColor = backgroundColor;
  pigeonResult.tileColor = tileColor;
  return pigeonResult;
}
+ (CustomColorTheme *)fromList:(NSArray *)list {
  CustomColorTheme *pigeonResult = [[CustomColorTheme alloc] init];
  pigeonResult.themeColor = GetNullableObjectAtIndex(list, 0);
  pigeonResult.textColor = GetNullableObjectAtIndex(list, 1);
  pigeonResult.backgroundColor = GetNullableObjectAtIndex(list, 2);
  pigeonResult.tileColor = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable CustomColorTheme *)nullableFromList:(NSArray *)list {
  return (list) ? [CustomColorTheme fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.themeColor ?: [NSNull null]),
    (self.textColor ?: [NSNull null]),
    (self.backgroundColor ?: [NSNull null]),
    (self.tileColor ?: [NSNull null]),
  ];
}
@end

@implementation RisksFactors
+ (instancetype)makeWithAge:(nullable NSNumber *)age
    cholesterol:(nullable NSNumber *)cholesterol
    cholesterolHdl:(nullable NSNumber *)cholesterolHdl
    sbp:(nullable NSNumber *)sbp
    isSmoker:(nullable NSNumber *)isSmoker
    hypertensionTreatment:(nullable NSNumber *)hypertensionTreatment
    hasDiabetes:(nullable NSNumber *)hasDiabetes
    bodyHeight:(nullable NSNumber *)bodyHeight
    bodyWeight:(nullable NSNumber *)bodyWeight
    gender:(nullable GenderBox *)gender
    country:(nullable NSString *)country
    race:(nullable RaceBox *)race {
  RisksFactors* pigeonResult = [[RisksFactors alloc] init];
  pigeonResult.age = age;
  pigeonResult.cholesterol = cholesterol;
  pigeonResult.cholesterolHdl = cholesterolHdl;
  pigeonResult.sbp = sbp;
  pigeonResult.isSmoker = isSmoker;
  pigeonResult.hypertensionTreatment = hypertensionTreatment;
  pigeonResult.hasDiabetes = hasDiabetes;
  pigeonResult.bodyHeight = bodyHeight;
  pigeonResult.bodyWeight = bodyWeight;
  pigeonResult.gender = gender;
  pigeonResult.country = country;
  pigeonResult.race = race;
  return pigeonResult;
}
+ (RisksFactors *)fromList:(NSArray *)list {
  RisksFactors *pigeonResult = [[RisksFactors alloc] init];
  pigeonResult.age = GetNullableObjectAtIndex(list, 0);
  pigeonResult.cholesterol = GetNullableObjectAtIndex(list, 1);
  pigeonResult.cholesterolHdl = GetNullableObjectAtIndex(list, 2);
  pigeonResult.sbp = GetNullableObjectAtIndex(list, 3);
  pigeonResult.isSmoker = GetNullableObjectAtIndex(list, 4);
  pigeonResult.hypertensionTreatment = GetNullableObjectAtIndex(list, 5);
  pigeonResult.hasDiabetes = GetNullableObjectAtIndex(list, 6);
  pigeonResult.bodyHeight = GetNullableObjectAtIndex(list, 7);
  pigeonResult.bodyWeight = GetNullableObjectAtIndex(list, 8);
  NSNumber *genderAsNumber = GetNullableObjectAtIndex(list, 9);
  GenderBox *gender = genderAsNumber == nil ? nil : [[GenderBox alloc] initWithValue: [genderAsNumber integerValue]];
  pigeonResult.gender = gender;
  pigeonResult.country = GetNullableObjectAtIndex(list, 10);
  NSNumber *raceAsNumber = GetNullableObjectAtIndex(list, 11);
  RaceBox *race = raceAsNumber == nil ? nil : [[RaceBox alloc] initWithValue: [raceAsNumber integerValue]];
  pigeonResult.race = race;
  return pigeonResult;
}
+ (nullable RisksFactors *)nullableFromList:(NSArray *)list {
  return (list) ? [RisksFactors fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.age ?: [NSNull null]),
    (self.cholesterol ?: [NSNull null]),
    (self.cholesterolHdl ?: [NSNull null]),
    (self.sbp ?: [NSNull null]),
    (self.isSmoker ?: [NSNull null]),
    (self.hypertensionTreatment ?: [NSNull null]),
    (self.hasDiabetes ?: [NSNull null]),
    (self.bodyHeight ?: [NSNull null]),
    (self.bodyWeight ?: [NSNull null]),
    (self.gender == nil ? [NSNull null] : [NSNumber numberWithInteger:self.gender.value]),
    (self.country ?: [NSNull null]),
    (self.race == nil ? [NSNull null] : [NSNumber numberWithInteger:self.race.value]),
  ];
}
@end

@implementation HardAndFatalEventsRisks
+ (instancetype)makeWithCoronaryDeathEventRisk:(nullable NSNumber *)coronaryDeathEventRisk
    fatalStrokeEventRisk:(nullable NSNumber *)fatalStrokeEventRisk
    totalCVMortalityRisk:(nullable NSNumber *)totalCVMortalityRisk
    hardCVEventRisk:(nullable NSNumber *)hardCVEventRisk {
  HardAndFatalEventsRisks* pigeonResult = [[HardAndFatalEventsRisks alloc] init];
  pigeonResult.coronaryDeathEventRisk = coronaryDeathEventRisk;
  pigeonResult.fatalStrokeEventRisk = fatalStrokeEventRisk;
  pigeonResult.totalCVMortalityRisk = totalCVMortalityRisk;
  pigeonResult.hardCVEventRisk = hardCVEventRisk;
  return pigeonResult;
}
+ (HardAndFatalEventsRisks *)fromList:(NSArray *)list {
  HardAndFatalEventsRisks *pigeonResult = [[HardAndFatalEventsRisks alloc] init];
  pigeonResult.coronaryDeathEventRisk = GetNullableObjectAtIndex(list, 0);
  pigeonResult.fatalStrokeEventRisk = GetNullableObjectAtIndex(list, 1);
  pigeonResult.totalCVMortalityRisk = GetNullableObjectAtIndex(list, 2);
  pigeonResult.hardCVEventRisk = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable HardAndFatalEventsRisks *)nullableFromList:(NSArray *)list {
  return (list) ? [HardAndFatalEventsRisks fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.coronaryDeathEventRisk ?: [NSNull null]),
    (self.fatalStrokeEventRisk ?: [NSNull null]),
    (self.totalCVMortalityRisk ?: [NSNull null]),
    (self.hardCVEventRisk ?: [NSNull null]),
  ];
}
@end

@implementation CVDiseasesRisks
+ (instancetype)makeWithOverallRisk:(nullable NSNumber *)overallRisk
    coronaryHeartDiseaseRisk:(nullable NSNumber *)coronaryHeartDiseaseRisk
    strokeRisk:(nullable NSNumber *)strokeRisk
    heartFailureRisk:(nullable NSNumber *)heartFailureRisk
    peripheralVascularDiseaseRisk:(nullable NSNumber *)peripheralVascularDiseaseRisk {
  CVDiseasesRisks* pigeonResult = [[CVDiseasesRisks alloc] init];
  pigeonResult.overallRisk = overallRisk;
  pigeonResult.coronaryHeartDiseaseRisk = coronaryHeartDiseaseRisk;
  pigeonResult.strokeRisk = strokeRisk;
  pigeonResult.heartFailureRisk = heartFailureRisk;
  pigeonResult.peripheralVascularDiseaseRisk = peripheralVascularDiseaseRisk;
  return pigeonResult;
}
+ (CVDiseasesRisks *)fromList:(NSArray *)list {
  CVDiseasesRisks *pigeonResult = [[CVDiseasesRisks alloc] init];
  pigeonResult.overallRisk = GetNullableObjectAtIndex(list, 0);
  pigeonResult.coronaryHeartDiseaseRisk = GetNullableObjectAtIndex(list, 1);
  pigeonResult.strokeRisk = GetNullableObjectAtIndex(list, 2);
  pigeonResult.heartFailureRisk = GetNullableObjectAtIndex(list, 3);
  pigeonResult.peripheralVascularDiseaseRisk = GetNullableObjectAtIndex(list, 4);
  return pigeonResult;
}
+ (nullable CVDiseasesRisks *)nullableFromList:(NSArray *)list {
  return (list) ? [CVDiseasesRisks fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.overallRisk ?: [NSNull null]),
    (self.coronaryHeartDiseaseRisk ?: [NSNull null]),
    (self.strokeRisk ?: [NSNull null]),
    (self.heartFailureRisk ?: [NSNull null]),
    (self.peripheralVascularDiseaseRisk ?: [NSNull null]),
  ];
}
@end

@implementation RisksFactorsScores
+ (instancetype)makeWithAgeScore:(nullable NSNumber *)ageScore
    sbpScore:(nullable NSNumber *)sbpScore
    smokingScore:(nullable NSNumber *)smokingScore
    diabetesScore:(nullable NSNumber *)diabetesScore
    bmiScore:(nullable NSNumber *)bmiScore
    cholesterolScore:(nullable NSNumber *)cholesterolScore
    cholesterolHdlScore:(nullable NSNumber *)cholesterolHdlScore
    totalScore:(nullable NSNumber *)totalScore {
  RisksFactorsScores* pigeonResult = [[RisksFactorsScores alloc] init];
  pigeonResult.ageScore = ageScore;
  pigeonResult.sbpScore = sbpScore;
  pigeonResult.smokingScore = smokingScore;
  pigeonResult.diabetesScore = diabetesScore;
  pigeonResult.bmiScore = bmiScore;
  pigeonResult.cholesterolScore = cholesterolScore;
  pigeonResult.cholesterolHdlScore = cholesterolHdlScore;
  pigeonResult.totalScore = totalScore;
  return pigeonResult;
}
+ (RisksFactorsScores *)fromList:(NSArray *)list {
  RisksFactorsScores *pigeonResult = [[RisksFactorsScores alloc] init];
  pigeonResult.ageScore = GetNullableObjectAtIndex(list, 0);
  pigeonResult.sbpScore = GetNullableObjectAtIndex(list, 1);
  pigeonResult.smokingScore = GetNullableObjectAtIndex(list, 2);
  pigeonResult.diabetesScore = GetNullableObjectAtIndex(list, 3);
  pigeonResult.bmiScore = GetNullableObjectAtIndex(list, 4);
  pigeonResult.cholesterolScore = GetNullableObjectAtIndex(list, 5);
  pigeonResult.cholesterolHdlScore = GetNullableObjectAtIndex(list, 6);
  pigeonResult.totalScore = GetNullableObjectAtIndex(list, 7);
  return pigeonResult;
}
+ (nullable RisksFactorsScores *)nullableFromList:(NSArray *)list {
  return (list) ? [RisksFactorsScores fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.ageScore ?: [NSNull null]),
    (self.sbpScore ?: [NSNull null]),
    (self.smokingScore ?: [NSNull null]),
    (self.diabetesScore ?: [NSNull null]),
    (self.bmiScore ?: [NSNull null]),
    (self.cholesterolScore ?: [NSNull null]),
    (self.cholesterolHdlScore ?: [NSNull null]),
    (self.totalScore ?: [NSNull null]),
  ];
}
@end

@implementation HealthRisks
+ (instancetype)makeWithHardAndFatalEvents:(HardAndFatalEventsRisks *)hardAndFatalEvents
    cvDiseases:(CVDiseasesRisks *)cvDiseases
    vascularAge:(nullable NSNumber *)vascularAge
    scores:(RisksFactorsScores *)scores {
  HealthRisks* pigeonResult = [[HealthRisks alloc] init];
  pigeonResult.hardAndFatalEvents = hardAndFatalEvents;
  pigeonResult.cvDiseases = cvDiseases;
  pigeonResult.vascularAge = vascularAge;
  pigeonResult.scores = scores;
  return pigeonResult;
}
+ (HealthRisks *)fromList:(NSArray *)list {
  HealthRisks *pigeonResult = [[HealthRisks alloc] init];
  pigeonResult.hardAndFatalEvents = [HardAndFatalEventsRisks nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  NSAssert(pigeonResult.hardAndFatalEvents != nil, @"");
  pigeonResult.cvDiseases = [CVDiseasesRisks nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  NSAssert(pigeonResult.cvDiseases != nil, @"");
  pigeonResult.vascularAge = GetNullableObjectAtIndex(list, 2);
  pigeonResult.scores = [RisksFactorsScores nullableFromList:(GetNullableObjectAtIndex(list, 3))];
  NSAssert(pigeonResult.scores != nil, @"");
  return pigeonResult;
}
+ (nullable HealthRisks *)nullableFromList:(NSArray *)list {
  return (list) ? [HealthRisks fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.hardAndFatalEvents ? [self.hardAndFatalEvents toList] : [NSNull null]),
    (self.cvDiseases ? [self.cvDiseases toList] : [NSNull null]),
    (self.vascularAge ?: [NSNull null]),
    (self.scores ? [self.scores toList] : [NSNull null]),
  ];
}
@end

@interface ShenaiSdkNativeApiCodecReader : FlutterStandardReader
@end
@implementation ShenaiSdkNativeApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [CVDiseasesRisks fromList:[self readValue]];
    case 129: 
      return [CameraModeResponse fromList:[self readValue]];
    case 130: 
      return [CustomColorTheme fromList:[self readValue]];
    case 131: 
      return [CustomMeasurementConfig fromList:[self readValue]];
    case 132: 
      return [FaceStateResponse fromList:[self readValue]];
    case 133: 
      return [HardAndFatalEventsRisks fromList:[self readValue]];
    case 134: 
      return [HealthRisks fromList:[self readValue]];
    case 135: 
      return [Heartbeat fromList:[self readValue]];
    case 136: 
      return [InitializationSettings fromList:[self readValue]];
    case 137: 
      return [InitializeResponse fromList:[self readValue]];
    case 138: 
      return [MeasurementPresetResponse fromList:[self readValue]];
    case 139: 
      return [MeasurementResults fromList:[self readValue]];
    case 140: 
      return [MeasurementStateResponse fromList:[self readValue]];
    case 141: 
      return [NormalizedFaceBbox fromList:[self readValue]];
    case 142: 
      return [OperatingModeResponse fromList:[self readValue]];
    case 143: 
      return [PrecisionModeResponse fromList:[self readValue]];
    case 144: 
      return [RisksFactors fromList:[self readValue]];
    case 145: 
      return [RisksFactorsScores fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface ShenaiSdkNativeApiCodecWriter : FlutterStandardWriter
@end
@implementation ShenaiSdkNativeApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[CVDiseasesRisks class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[CameraModeResponse class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[CustomColorTheme class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[CustomMeasurementConfig class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FaceStateResponse class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[HardAndFatalEventsRisks class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[HealthRisks class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[Heartbeat class]]) {
    [self writeByte:135];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[InitializationSettings class]]) {
    [self writeByte:136];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[InitializeResponse class]]) {
    [self writeByte:137];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[MeasurementPresetResponse class]]) {
    [self writeByte:138];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[MeasurementResults class]]) {
    [self writeByte:139];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[MeasurementStateResponse class]]) {
    [self writeByte:140];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[NormalizedFaceBbox class]]) {
    [self writeByte:141];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[OperatingModeResponse class]]) {
    [self writeByte:142];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PrecisionModeResponse class]]) {
    [self writeByte:143];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[RisksFactors class]]) {
    [self writeByte:144];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[RisksFactorsScores class]]) {
    [self writeByte:145];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface ShenaiSdkNativeApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ShenaiSdkNativeApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ShenaiSdkNativeApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ShenaiSdkNativeApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ShenaiSdkNativeApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    ShenaiSdkNativeApiCodecReaderWriter *readerWriter = [[ShenaiSdkNativeApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void ShenaiSdkNativeApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ShenaiSdkNativeApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.initialize"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeApiKey:userId:settings:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(initializeApiKey:userId:settings:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        NSString *arg_userId = GetNullableObjectAtIndex(args, 1);
        InitializationSettings *arg_settings = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        InitializeResponse *output = [api initializeApiKey:arg_apiKey userId:arg_userId settings:arg_settings error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.isInitialized"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isInitializedWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(isInitializedWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api isInitializedWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.deinitialize"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(deinitializeWithCompletion:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(deinitializeWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api deinitializeWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setOperatingMode"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setOperatingModeMode:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(setOperatingModeMode:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        OperatingMode arg_mode = [GetNullableObjectAtIndex(args, 0) integerValue];
        FlutterError *error;
        [api setOperatingModeMode:arg_mode error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getOperatingMode"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getOperatingModeWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getOperatingModeWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        OperatingModeResponse *output = [api getOperatingModeWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setPrecisionMode"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setPrecisionModeMode:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(setPrecisionModeMode:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PrecisionMode arg_mode = [GetNullableObjectAtIndex(args, 0) integerValue];
        FlutterError *error;
        [api setPrecisionModeMode:arg_mode error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getPrecisionMode"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPrecisionModeWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getPrecisionModeWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        PrecisionModeResponse *output = [api getPrecisionModeWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setMeasurementPreset"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setMeasurementPresetPreset:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(setMeasurementPresetPreset:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        MeasurementPreset arg_preset = [GetNullableObjectAtIndex(args, 0) integerValue];
        FlutterError *error;
        [api setMeasurementPresetPreset:arg_preset error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getMeasurementPreset"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMeasurementPresetWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getMeasurementPresetWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        MeasurementPresetResponse *output = [api getMeasurementPresetWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setCustomMeasurementConfig"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setCustomMeasurementConfigConfig:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(setCustomMeasurementConfigConfig:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        CustomMeasurementConfig *arg_config = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setCustomMeasurementConfigConfig:arg_config error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setCustomColorTheme"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setCustomColorThemeTheme:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(setCustomColorThemeTheme:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        CustomColorTheme *arg_theme = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setCustomColorThemeTheme:arg_theme error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setCameraMode"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setCameraModeMode:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(setCameraModeMode:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        CameraMode arg_mode = [GetNullableObjectAtIndex(args, 0) integerValue];
        FlutterError *error;
        [api setCameraModeMode:arg_mode error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getCameraMode"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getCameraModeWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getCameraModeWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        CameraModeResponse *output = [api getCameraModeWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setShowUserInterface"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setShowUserInterfaceShow:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(setShowUserInterfaceShow:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_show = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setShowUserInterfaceShow:arg_show error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getShowUserInterface"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getShowUserInterfaceWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getShowUserInterfaceWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api getShowUserInterfaceWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setShowFacePositioningOverlay"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setShowFacePositioningOverlayShow:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(setShowFacePositioningOverlayShow:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_show = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setShowFacePositioningOverlayShow:arg_show error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getShowFacePositioningOverlay"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getShowFacePositioningOverlayWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getShowFacePositioningOverlayWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api getShowFacePositioningOverlayWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setShowVisualWarnings"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setShowVisualWarningsShow:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(setShowVisualWarningsShow:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_show = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setShowVisualWarningsShow:arg_show error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getShowVisualWarnings"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getShowVisualWarningsWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getShowVisualWarningsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api getShowVisualWarningsWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setEnableCameraSwap"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setEnableCameraSwapEnable:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(setEnableCameraSwapEnable:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enable = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setEnableCameraSwapEnable:arg_enable error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getEnableCameraSwap"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getEnableCameraSwapWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getEnableCameraSwapWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api getEnableCameraSwapWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setShowFaceMask"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setShowFaceMaskShow:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(setShowFaceMaskShow:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_show = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setShowFaceMaskShow:arg_show error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getShowFaceMask"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getShowFaceMaskWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getShowFaceMaskWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api getShowFaceMaskWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setShowBloodFlow"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setShowBloodFlowShow:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(setShowBloodFlowShow:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_show = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setShowBloodFlowShow:arg_show error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getShowBloodFlow"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getShowBloodFlowWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getShowBloodFlowWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api getShowBloodFlowWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setEnableStartAfterSuccess"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setEnableStartAfterSuccessEnable:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(setEnableStartAfterSuccessEnable:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enable = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setEnableStartAfterSuccessEnable:arg_enable error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getEnableStartAfterSuccess"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getEnableStartAfterSuccessWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getEnableStartAfterSuccessWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api getEnableStartAfterSuccessWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getFaceState"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getFaceStateWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getFaceStateWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FaceStateResponse *output = [api getFaceStateWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getNormalizedFaceBbox"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getNormalizedFaceBboxWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getNormalizedFaceBboxWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NormalizedFaceBbox *output = [api getNormalizedFaceBboxWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getMeasurementState"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMeasurementStateWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getMeasurementStateWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        MeasurementStateResponse *output = [api getMeasurementStateWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getMeasurementProgressPercentage"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMeasurementProgressPercentageWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getMeasurementProgressPercentageWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api getMeasurementProgressPercentageWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getHeartRate10s"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getHeartRate10sWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getHeartRate10sWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api getHeartRate10sWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getHeartRate4s"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getHeartRate4sWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getHeartRate4sWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api getHeartRate4sWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getRealtimeMetrics"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getRealtimeMetricsPeriod_sec:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getRealtimeMetricsPeriod_sec:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_period_sec = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        MeasurementResults *output = [api getRealtimeMetricsPeriod_sec:arg_period_sec error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getMeasurementResults"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMeasurementResultsWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getMeasurementResultsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        MeasurementResults *output = [api getMeasurementResultsWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setRecordingEnabled"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setRecordingEnabledEnabled:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(setRecordingEnabledEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setRecordingEnabledEnabled:arg_enabled error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getRecordingEnabled"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getRecordingEnabledWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getRecordingEnabledWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api getRecordingEnabledWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getTotalBadSignalSeconds"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTotalBadSignalSecondsWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getTotalBadSignalSecondsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api getTotalBadSignalSecondsWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getCurrentSignalQualityMetric"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getCurrentSignalQualityMetricWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getCurrentSignalQualityMetricWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api getCurrentSignalQualityMetricWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getSignalQualityMapPng"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSignalQualityMapPngWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getSignalQualityMapPngWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FlutterStandardTypedData *output = [api getSignalQualityMapPngWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getFaceTexturePng"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getFaceTexturePngWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getFaceTexturePngWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FlutterStandardTypedData *output = [api getFaceTexturePngWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getFullPpgSignal"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getFullPpgSignalWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getFullPpgSignalWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FlutterStandardTypedData *output = [api getFullPpgSignalWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getTraceID"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTraceIDWithError:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getTraceIDWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api getTraceIDWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setLanguage"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLanguageLanguage:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(setLanguageLanguage:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_language = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setLanguageLanguage:arg_language error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.computeHealthRisks"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(computeHealthRisksHealthRisksFactors:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(computeHealthRisksHealthRisksFactors:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        RisksFactors *arg_healthRisksFactors = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        HealthRisks *output = [api computeHealthRisksHealthRisksFactors:arg_healthRisksFactors error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getMinimalHealthRisks"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMinimalHealthRisksHealthRisksFactors:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getMinimalHealthRisksHealthRisksFactors:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        RisksFactors *arg_healthRisksFactors = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        HealthRisks *output = [api getMinimalHealthRisksHealthRisksFactors:arg_healthRisksFactors error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getMaximalHealthRisks"
        binaryMessenger:binaryMessenger
        codec:ShenaiSdkNativeApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMaximalHealthRisksHealthRisksFactors:error:)], @"ShenaiSdkNativeApi api (%@) doesn't respond to @selector(getMaximalHealthRisksHealthRisksFactors:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        RisksFactors *arg_healthRisksFactors = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        HealthRisks *output = [api getMaximalHealthRisksHealthRisksFactors:arg_healthRisksFactors error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
