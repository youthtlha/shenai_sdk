// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum InitializationResult {
  success,
  failInvalidApiKey,
  failConnectionError,
  failInternalError,
}

enum OperatingMode {
  positioning,
  measure,
  systemOverloaded,
}

enum PrecisionMode {
  strict,
  relaxed,
}

enum MeasurementPreset {
  oneMinuteHrHrvBr,
  oneMinuteBetaMetrics,
  infiniteHr,
  infiniteMetrics,
  fourtyFiveSecondsUnvalidated,
  thirtySecondsUnvalidated,
}

enum CameraMode {
  off,
  facingUser,
  facingEnvironment,
}

enum OnboardingMode {
  hidden,
  showOnce,
  showAlways,
}

enum FaceState {
  ok,
  tooFar,
  tooClose,
  notCentered,
  notVisible,
  unknown,
}

enum MeasurementState {
  notStarted,
  waitingForFace,
  runningSignalShort,
  runningSignalGood,
  runningSignalBad,
  runningSignalBadDeviceUnstable,
  finished,
  failed,
}

enum Gender {
  male,
  female,
  other,
}

enum Race {
  white,
  africanAmerican,
  other,
}

class InitializeResponse {
  InitializeResponse({
    required this.result,
  });

  InitializationResult result;

  Object encode() {
    return <Object?>[
      result.index,
    ];
  }

  static InitializeResponse decode(Object result) {
    result as List<Object?>;
    return InitializeResponse(
      result: InitializationResult.values[result[0]! as int],
    );
  }
}

class OperatingModeResponse {
  OperatingModeResponse({
    required this.mode,
  });

  OperatingMode mode;

  Object encode() {
    return <Object?>[
      mode.index,
    ];
  }

  static OperatingModeResponse decode(Object result) {
    result as List<Object?>;
    return OperatingModeResponse(
      mode: OperatingMode.values[result[0]! as int],
    );
  }
}

class PrecisionModeResponse {
  PrecisionModeResponse({
    required this.mode,
  });

  PrecisionMode mode;

  Object encode() {
    return <Object?>[
      mode.index,
    ];
  }

  static PrecisionModeResponse decode(Object result) {
    result as List<Object?>;
    return PrecisionModeResponse(
      mode: PrecisionMode.values[result[0]! as int],
    );
  }
}

class MeasurementPresetResponse {
  MeasurementPresetResponse({
    required this.preset,
  });

  MeasurementPreset preset;

  Object encode() {
    return <Object?>[
      preset.index,
    ];
  }

  static MeasurementPresetResponse decode(Object result) {
    result as List<Object?>;
    return MeasurementPresetResponse(
      preset: MeasurementPreset.values[result[0]! as int],
    );
  }
}

class CameraModeResponse {
  CameraModeResponse({
    required this.mode,
  });

  CameraMode mode;

  Object encode() {
    return <Object?>[
      mode.index,
    ];
  }

  static CameraModeResponse decode(Object result) {
    result as List<Object?>;
    return CameraModeResponse(
      mode: CameraMode.values[result[0]! as int],
    );
  }
}

class FaceStateResponse {
  FaceStateResponse({
    required this.state,
  });

  FaceState state;

  Object encode() {
    return <Object?>[
      state.index,
    ];
  }

  static FaceStateResponse decode(Object result) {
    result as List<Object?>;
    return FaceStateResponse(
      state: FaceState.values[result[0]! as int],
    );
  }
}

class NormalizedFaceBbox {
  NormalizedFaceBbox({
    required this.x,
    required this.y,
    required this.width,
    required this.height,
  });

  double x;

  double y;

  double width;

  double height;

  Object encode() {
    return <Object?>[
      x,
      y,
      width,
      height,
    ];
  }

  static NormalizedFaceBbox decode(Object result) {
    result as List<Object?>;
    return NormalizedFaceBbox(
      x: result[0]! as double,
      y: result[1]! as double,
      width: result[2]! as double,
      height: result[3]! as double,
    );
  }
}

class MeasurementStateResponse {
  MeasurementStateResponse({
    required this.state,
  });

  MeasurementState state;

  Object encode() {
    return <Object?>[
      state.index,
    ];
  }

  static MeasurementStateResponse decode(Object result) {
    result as List<Object?>;
    return MeasurementStateResponse(
      state: MeasurementState.values[result[0]! as int],
    );
  }
}

class Heartbeat {
  Heartbeat({
    required this.start_location_sec,
    required this.end_location_sec,
    required this.duration_ms,
  });

  double start_location_sec;

  double end_location_sec;

  double duration_ms;

  Object encode() {
    return <Object?>[
      start_location_sec,
      end_location_sec,
      duration_ms,
    ];
  }

  static Heartbeat decode(Object result) {
    result as List<Object?>;
    return Heartbeat(
      start_location_sec: result[0]! as double,
      end_location_sec: result[1]! as double,
      duration_ms: result[2]! as double,
    );
  }
}

class MeasurementResults {
  MeasurementResults({
    required this.heart_rate_bpm,
    this.hrv_sdnn_ms,
    this.hrv_lnrmssd_ms,
    this.stress_index,
    this.breathing_rate_bpm,
    this.systolic_blood_pressure_mmhg,
    this.diastolic_blood_pressure_mmhg,
    required this.heartbeats,
    required this.average_signal_quality,
  });

  double heart_rate_bpm;

  double? hrv_sdnn_ms;

  double? hrv_lnrmssd_ms;

  double? stress_index;

  double? breathing_rate_bpm;

  double? systolic_blood_pressure_mmhg;

  double? diastolic_blood_pressure_mmhg;

  List<Heartbeat?> heartbeats;

  double average_signal_quality;

  Object encode() {
    return <Object?>[
      heart_rate_bpm,
      hrv_sdnn_ms,
      hrv_lnrmssd_ms,
      stress_index,
      breathing_rate_bpm,
      systolic_blood_pressure_mmhg,
      diastolic_blood_pressure_mmhg,
      heartbeats,
      average_signal_quality,
    ];
  }

  static MeasurementResults decode(Object result) {
    result as List<Object?>;
    return MeasurementResults(
      heart_rate_bpm: result[0]! as double,
      hrv_sdnn_ms: result[1] as double?,
      hrv_lnrmssd_ms: result[2] as double?,
      stress_index: result[3] as double?,
      breathing_rate_bpm: result[4] as double?,
      systolic_blood_pressure_mmhg: result[5] as double?,
      diastolic_blood_pressure_mmhg: result[6] as double?,
      heartbeats: (result[7] as List<Object?>?)!.cast<Heartbeat?>(),
      average_signal_quality: result[8]! as double,
    );
  }
}

class InitializationSettings {
  InitializationSettings({
    this.precisionMode,
    this.operatingMode,
    this.measurementPreset,
    this.cameraMode,
    this.onboardingMode,
    this.showUserInterface,
    this.showFacePositioningOverlay,
    this.showVisualWarnings,
    this.enableCameraSwap,
    this.showFaceMask,
    this.showBloodFlow,
    this.proVersionLock,
    this.hideShenaiLogo,
  });

  PrecisionMode? precisionMode;

  OperatingMode? operatingMode;

  MeasurementPreset? measurementPreset;

  CameraMode? cameraMode;

  OnboardingMode? onboardingMode;

  bool? showUserInterface;

  bool? showFacePositioningOverlay;

  bool? showVisualWarnings;

  bool? enableCameraSwap;

  bool? showFaceMask;

  bool? showBloodFlow;

  bool? proVersionLock;

  bool? hideShenaiLogo;

  Object encode() {
    return <Object?>[
      precisionMode?.index,
      operatingMode?.index,
      measurementPreset?.index,
      cameraMode?.index,
      onboardingMode?.index,
      showUserInterface,
      showFacePositioningOverlay,
      showVisualWarnings,
      enableCameraSwap,
      showFaceMask,
      showBloodFlow,
      proVersionLock,
      hideShenaiLogo,
    ];
  }

  static InitializationSettings decode(Object result) {
    result as List<Object?>;
    return InitializationSettings(
      precisionMode: result[0] != null
          ? PrecisionMode.values[result[0]! as int]
          : null,
      operatingMode: result[1] != null
          ? OperatingMode.values[result[1]! as int]
          : null,
      measurementPreset: result[2] != null
          ? MeasurementPreset.values[result[2]! as int]
          : null,
      cameraMode: result[3] != null
          ? CameraMode.values[result[3]! as int]
          : null,
      onboardingMode: result[4] != null
          ? OnboardingMode.values[result[4]! as int]
          : null,
      showUserInterface: result[5] as bool?,
      showFacePositioningOverlay: result[6] as bool?,
      showVisualWarnings: result[7] as bool?,
      enableCameraSwap: result[8] as bool?,
      showFaceMask: result[9] as bool?,
      showBloodFlow: result[10] as bool?,
      proVersionLock: result[11] as bool?,
      hideShenaiLogo: result[12] as bool?,
    );
  }
}

class CustomMeasurementConfig {
  CustomMeasurementConfig({
    this.durationSeconds,
    this.infiniteMeasurement,
    this.showHeartRate,
    this.showHrvSdnn,
    this.showBreathingRate,
    this.showSystolicBloodPressure,
    this.showDiastolicBloodPressure,
    this.showCardiacStress,
    this.realtimeHrPeriodSeconds,
    this.realtimeHrvPeriodSeconds,
    this.realtimeCardiacStressPeriodSeconds,
  });

  double? durationSeconds;

  bool? infiniteMeasurement;

  bool? showHeartRate;

  bool? showHrvSdnn;

  bool? showBreathingRate;

  bool? showSystolicBloodPressure;

  bool? showDiastolicBloodPressure;

  bool? showCardiacStress;

  double? realtimeHrPeriodSeconds;

  double? realtimeHrvPeriodSeconds;

  double? realtimeCardiacStressPeriodSeconds;

  Object encode() {
    return <Object?>[
      durationSeconds,
      infiniteMeasurement,
      showHeartRate,
      showHrvSdnn,
      showBreathingRate,
      showSystolicBloodPressure,
      showDiastolicBloodPressure,
      showCardiacStress,
      realtimeHrPeriodSeconds,
      realtimeHrvPeriodSeconds,
      realtimeCardiacStressPeriodSeconds,
    ];
  }

  static CustomMeasurementConfig decode(Object result) {
    result as List<Object?>;
    return CustomMeasurementConfig(
      durationSeconds: result[0] as double?,
      infiniteMeasurement: result[1] as bool?,
      showHeartRate: result[2] as bool?,
      showHrvSdnn: result[3] as bool?,
      showBreathingRate: result[4] as bool?,
      showSystolicBloodPressure: result[5] as bool?,
      showDiastolicBloodPressure: result[6] as bool?,
      showCardiacStress: result[7] as bool?,
      realtimeHrPeriodSeconds: result[8] as double?,
      realtimeHrvPeriodSeconds: result[9] as double?,
      realtimeCardiacStressPeriodSeconds: result[10] as double?,
    );
  }
}

class CustomColorTheme {
  CustomColorTheme({
    this.themeColor,
    this.textColor,
    this.backgroundColor,
    this.tileColor,
  });

  String? themeColor;

  String? textColor;

  String? backgroundColor;

  String? tileColor;

  Object encode() {
    return <Object?>[
      themeColor,
      textColor,
      backgroundColor,
      tileColor,
    ];
  }

  static CustomColorTheme decode(Object result) {
    result as List<Object?>;
    return CustomColorTheme(
      themeColor: result[0] as String?,
      textColor: result[1] as String?,
      backgroundColor: result[2] as String?,
      tileColor: result[3] as String?,
    );
  }
}

class RisksFactors {
  RisksFactors({
    this.age,
    this.cholesterol,
    this.cholesterolHdl,
    this.sbp,
    this.isSmoker,
    this.hypertensionTreatment,
    this.hasDiabetes,
    this.bodyHeight,
    this.bodyWeight,
    this.gender,
    this.country,
    this.race,
  });

  int? age;

  double? cholesterol;

  double? cholesterolHdl;

  double? sbp;

  bool? isSmoker;

  bool? hypertensionTreatment;

  bool? hasDiabetes;

  double? bodyHeight;

  double? bodyWeight;

  Gender? gender;

  String? country;

  Race? race;

  Object encode() {
    return <Object?>[
      age,
      cholesterol,
      cholesterolHdl,
      sbp,
      isSmoker,
      hypertensionTreatment,
      hasDiabetes,
      bodyHeight,
      bodyWeight,
      gender?.index,
      country,
      race?.index,
    ];
  }

  static RisksFactors decode(Object result) {
    result as List<Object?>;
    return RisksFactors(
      age: result[0] as int?,
      cholesterol: result[1] as double?,
      cholesterolHdl: result[2] as double?,
      sbp: result[3] as double?,
      isSmoker: result[4] as bool?,
      hypertensionTreatment: result[5] as bool?,
      hasDiabetes: result[6] as bool?,
      bodyHeight: result[7] as double?,
      bodyWeight: result[8] as double?,
      gender: result[9] != null
          ? Gender.values[result[9]! as int]
          : null,
      country: result[10] as String?,
      race: result[11] != null
          ? Race.values[result[11]! as int]
          : null,
    );
  }
}

class HardAndFatalEventsRisks {
  HardAndFatalEventsRisks({
    this.coronaryDeathEventRisk,
    this.fatalStrokeEventRisk,
    this.totalCVMortalityRisk,
    this.hardCVEventRisk,
  });

  double? coronaryDeathEventRisk;

  double? fatalStrokeEventRisk;

  double? totalCVMortalityRisk;

  double? hardCVEventRisk;

  Object encode() {
    return <Object?>[
      coronaryDeathEventRisk,
      fatalStrokeEventRisk,
      totalCVMortalityRisk,
      hardCVEventRisk,
    ];
  }

  static HardAndFatalEventsRisks decode(Object result) {
    result as List<Object?>;
    return HardAndFatalEventsRisks(
      coronaryDeathEventRisk: result[0] as double?,
      fatalStrokeEventRisk: result[1] as double?,
      totalCVMortalityRisk: result[2] as double?,
      hardCVEventRisk: result[3] as double?,
    );
  }
}

class CVDiseasesRisks {
  CVDiseasesRisks({
    this.overallRisk,
    this.coronaryHeartDiseaseRisk,
    this.strokeRisk,
    this.heartFailureRisk,
    this.peripheralVascularDiseaseRisk,
  });

  double? overallRisk;

  double? coronaryHeartDiseaseRisk;

  double? strokeRisk;

  double? heartFailureRisk;

  double? peripheralVascularDiseaseRisk;

  Object encode() {
    return <Object?>[
      overallRisk,
      coronaryHeartDiseaseRisk,
      strokeRisk,
      heartFailureRisk,
      peripheralVascularDiseaseRisk,
    ];
  }

  static CVDiseasesRisks decode(Object result) {
    result as List<Object?>;
    return CVDiseasesRisks(
      overallRisk: result[0] as double?,
      coronaryHeartDiseaseRisk: result[1] as double?,
      strokeRisk: result[2] as double?,
      heartFailureRisk: result[3] as double?,
      peripheralVascularDiseaseRisk: result[4] as double?,
    );
  }
}

class RisksFactorsScores {
  RisksFactorsScores({
    this.ageScore,
    this.sbpScore,
    this.smokingScore,
    this.diabetesScore,
    this.bmiScore,
    this.cholesterolScore,
    this.cholesterolHdlScore,
    this.totalScore,
  });

  int? ageScore;

  int? sbpScore;

  int? smokingScore;

  int? diabetesScore;

  int? bmiScore;

  int? cholesterolScore;

  int? cholesterolHdlScore;

  int? totalScore;

  Object encode() {
    return <Object?>[
      ageScore,
      sbpScore,
      smokingScore,
      diabetesScore,
      bmiScore,
      cholesterolScore,
      cholesterolHdlScore,
      totalScore,
    ];
  }

  static RisksFactorsScores decode(Object result) {
    result as List<Object?>;
    return RisksFactorsScores(
      ageScore: result[0] as int?,
      sbpScore: result[1] as int?,
      smokingScore: result[2] as int?,
      diabetesScore: result[3] as int?,
      bmiScore: result[4] as int?,
      cholesterolScore: result[5] as int?,
      cholesterolHdlScore: result[6] as int?,
      totalScore: result[7] as int?,
    );
  }
}

class HealthRisks {
  HealthRisks({
    required this.hardAndFatalEvents,
    required this.cvDiseases,
    this.vascularAge,
    required this.scores,
  });

  HardAndFatalEventsRisks hardAndFatalEvents;

  CVDiseasesRisks cvDiseases;

  int? vascularAge;

  RisksFactorsScores scores;

  Object encode() {
    return <Object?>[
      hardAndFatalEvents.encode(),
      cvDiseases.encode(),
      vascularAge,
      scores.encode(),
    ];
  }

  static HealthRisks decode(Object result) {
    result as List<Object?>;
    return HealthRisks(
      hardAndFatalEvents: HardAndFatalEventsRisks.decode(result[0]! as List<Object?>),
      cvDiseases: CVDiseasesRisks.decode(result[1]! as List<Object?>),
      vascularAge: result[2] as int?,
      scores: RisksFactorsScores.decode(result[3]! as List<Object?>),
    );
  }
}

class _ShenaiSdkNativeApiCodec extends StandardMessageCodec {
  const _ShenaiSdkNativeApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CVDiseasesRisks) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is CameraModeResponse) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is CustomColorTheme) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is CustomMeasurementConfig) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is FaceStateResponse) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is HardAndFatalEventsRisks) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is HealthRisks) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is Heartbeat) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is InitializationSettings) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is InitializeResponse) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is MeasurementPresetResponse) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is MeasurementResults) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is MeasurementStateResponse) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is NormalizedFaceBbox) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is OperatingModeResponse) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is PrecisionModeResponse) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is RisksFactors) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is RisksFactorsScores) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return CVDiseasesRisks.decode(readValue(buffer)!);
      case 129: 
        return CameraModeResponse.decode(readValue(buffer)!);
      case 130: 
        return CustomColorTheme.decode(readValue(buffer)!);
      case 131: 
        return CustomMeasurementConfig.decode(readValue(buffer)!);
      case 132: 
        return FaceStateResponse.decode(readValue(buffer)!);
      case 133: 
        return HardAndFatalEventsRisks.decode(readValue(buffer)!);
      case 134: 
        return HealthRisks.decode(readValue(buffer)!);
      case 135: 
        return Heartbeat.decode(readValue(buffer)!);
      case 136: 
        return InitializationSettings.decode(readValue(buffer)!);
      case 137: 
        return InitializeResponse.decode(readValue(buffer)!);
      case 138: 
        return MeasurementPresetResponse.decode(readValue(buffer)!);
      case 139: 
        return MeasurementResults.decode(readValue(buffer)!);
      case 140: 
        return MeasurementStateResponse.decode(readValue(buffer)!);
      case 141: 
        return NormalizedFaceBbox.decode(readValue(buffer)!);
      case 142: 
        return OperatingModeResponse.decode(readValue(buffer)!);
      case 143: 
        return PrecisionModeResponse.decode(readValue(buffer)!);
      case 144: 
        return RisksFactors.decode(readValue(buffer)!);
      case 145: 
        return RisksFactorsScores.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ShenaiSdkNativeApi {
  /// Constructor for [ShenaiSdkNativeApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ShenaiSdkNativeApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ShenaiSdkNativeApiCodec();

  Future<InitializeResponse> initialize(String arg_apiKey, String arg_userId, InitializationSettings? arg_settings) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.initialize', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_apiKey, arg_userId, arg_settings]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as InitializeResponse?)!;
    }
  }

  Future<bool> isInitialized() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.isInitialized', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<void> deinitialize() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.deinitialize', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setOperatingMode(OperatingMode arg_mode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setOperatingMode', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_mode.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<OperatingModeResponse> getOperatingMode() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getOperatingMode', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as OperatingModeResponse?)!;
    }
  }

  Future<void> setPrecisionMode(PrecisionMode arg_mode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setPrecisionMode', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_mode.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PrecisionModeResponse> getPrecisionMode() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getPrecisionMode', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PrecisionModeResponse?)!;
    }
  }

  Future<void> setMeasurementPreset(MeasurementPreset arg_preset) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setMeasurementPreset', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_preset.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<MeasurementPresetResponse> getMeasurementPreset() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getMeasurementPreset', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MeasurementPresetResponse?)!;
    }
  }

  Future<void> setCustomMeasurementConfig(CustomMeasurementConfig arg_config) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setCustomMeasurementConfig', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_config]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setCustomColorTheme(CustomColorTheme arg_theme) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setCustomColorTheme', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_theme]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setCameraMode(CameraMode arg_mode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setCameraMode', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_mode.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<CameraModeResponse> getCameraMode() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getCameraMode', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as CameraModeResponse?)!;
    }
  }

  Future<void> setShowUserInterface(bool arg_show) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setShowUserInterface', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_show]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> getShowUserInterface() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getShowUserInterface', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<void> setShowFacePositioningOverlay(bool arg_show) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setShowFacePositioningOverlay', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_show]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> getShowFacePositioningOverlay() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getShowFacePositioningOverlay', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<void> setShowVisualWarnings(bool arg_show) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setShowVisualWarnings', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_show]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> getShowVisualWarnings() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getShowVisualWarnings', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<void> setEnableCameraSwap(bool arg_enable) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setEnableCameraSwap', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enable]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> getEnableCameraSwap() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getEnableCameraSwap', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<void> setShowFaceMask(bool arg_show) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setShowFaceMask', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_show]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> getShowFaceMask() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getShowFaceMask', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<void> setShowBloodFlow(bool arg_show) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setShowBloodFlow', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_show]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> getShowBloodFlow() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getShowBloodFlow', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<void> setEnableStartAfterSuccess(bool arg_enable) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setEnableStartAfterSuccess', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enable]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> getEnableStartAfterSuccess() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getEnableStartAfterSuccess', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<FaceStateResponse> getFaceState() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getFaceState', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FaceStateResponse?)!;
    }
  }

  Future<NormalizedFaceBbox?> getNormalizedFaceBbox() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getNormalizedFaceBbox', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as NormalizedFaceBbox?);
    }
  }

  Future<MeasurementStateResponse> getMeasurementState() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getMeasurementState', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MeasurementStateResponse?)!;
    }
  }

  Future<double> getMeasurementProgressPercentage() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getMeasurementProgressPercentage', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as double?)!;
    }
  }

  Future<int?> getHeartRate10s() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getHeartRate10s', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as int?);
    }
  }

  Future<int?> getHeartRate4s() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getHeartRate4s', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as int?);
    }
  }

  Future<MeasurementResults?> getRealtimeMetrics(double arg_period_sec) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getRealtimeMetrics', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_period_sec]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as MeasurementResults?);
    }
  }

  Future<MeasurementResults?> getMeasurementResults() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getMeasurementResults', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as MeasurementResults?);
    }
  }

  Future<void> setRecordingEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setRecordingEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> getRecordingEnabled() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getRecordingEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<double> getTotalBadSignalSeconds() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getTotalBadSignalSeconds', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as double?)!;
    }
  }

  Future<double> getCurrentSignalQualityMetric() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getCurrentSignalQualityMetric', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as double?)!;
    }
  }

  Future<Uint8List?> getSignalQualityMapPng() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getSignalQualityMapPng', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as Uint8List?);
    }
  }

  Future<Uint8List?> getFaceTexturePng() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getFaceTexturePng', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as Uint8List?);
    }
  }

  Future<Float64List?> getFullPpgSignal() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getFullPpgSignal', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as Float64List?);
    }
  }

  Future<String> getTraceID() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getTraceID', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<void> setLanguage(String arg_language) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.setLanguage', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_language]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<HealthRisks> computeHealthRisks(RisksFactors arg_healthRisksFactors) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.computeHealthRisks', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_healthRisksFactors]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as HealthRisks?)!;
    }
  }

  Future<HealthRisks> getMinimalHealthRisks(RisksFactors arg_healthRisksFactors) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getMinimalHealthRisks', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_healthRisksFactors]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as HealthRisks?)!;
    }
  }

  Future<HealthRisks> getMaximalHealthRisks(RisksFactors arg_healthRisksFactors) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shenai_sdk.ShenaiSdkNativeApi.getMaximalHealthRisks', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_healthRisksFactors]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as HealthRisks?)!;
    }
  }
}
